/* tslint:disable */
/* eslint-disable */
/**
 * Affiliate Backend API
 * API Server for Affiliate Backend Application
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DomainPublisherMessage
 */
export interface DomainPublisherMessage {
    /**
     * 
     * @type {string}
     * @memberof DomainPublisherMessage
     */
    content?: string;
    /**
     * 
     * @type {number}
     * @memberof DomainPublisherMessage
     */
    conversationId?: number;
    /**
     * 
     * @type {string}
     * @memberof DomainPublisherMessage
     */
    externalMessageId?: string;
    /**
     * 
     * @type {number}
     * @memberof DomainPublisherMessage
     */
    messageId?: number;
    /**
     * 
     * @type {string}
     * @memberof DomainPublisherMessage
     */
    messageType?: string;
    /**
     * 
     * @type {{ [key: string]: any | undefined; }}
     * @memberof DomainPublisherMessage
     */
    metadata?: { [key: string]: any | undefined; };
    /**
     * 
     * @type {string}
     * @memberof DomainPublisherMessage
     */
    senderId?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainPublisherMessage
     */
    senderType?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainPublisherMessage
     */
    sentAt?: string;
}

/**
 * Check if a given object implements the DomainPublisherMessage interface.
 */
export function instanceOfDomainPublisherMessage(value: object): value is DomainPublisherMessage {
    return true;
}

export function DomainPublisherMessageFromJSON(json: any): DomainPublisherMessage {
    return DomainPublisherMessageFromJSONTyped(json, false);
}

export function DomainPublisherMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): DomainPublisherMessage {
    if (json == null) {
        return json;
    }
    return {
        
        'content': json['content'] == null ? undefined : json['content'],
        'conversationId': json['conversation_id'] == null ? undefined : json['conversation_id'],
        'externalMessageId': json['external_message_id'] == null ? undefined : json['external_message_id'],
        'messageId': json['message_id'] == null ? undefined : json['message_id'],
        'messageType': json['message_type'] == null ? undefined : json['message_type'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'senderId': json['sender_id'] == null ? undefined : json['sender_id'],
        'senderType': json['sender_type'] == null ? undefined : json['sender_type'],
        'sentAt': json['sent_at'] == null ? undefined : json['sent_at'],
    };
}

export function DomainPublisherMessageToJSON(json: any): DomainPublisherMessage {
    return DomainPublisherMessageToJSONTyped(json, false);
}

export function DomainPublisherMessageToJSONTyped(value?: DomainPublisherMessage | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'content': value['content'],
        'conversation_id': value['conversationId'],
        'external_message_id': value['externalMessageId'],
        'message_id': value['messageId'],
        'message_type': value['messageType'],
        'metadata': value['metadata'],
        'sender_id': value['senderId'],
        'sender_type': value['senderType'],
        'sent_at': value['sentAt'],
    };
}

