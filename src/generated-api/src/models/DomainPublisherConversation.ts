/* tslint:disable */
/* eslint-disable */
/**
 * Affiliate Backend API
 * API Server for Affiliate Backend Application
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DomainFavoritePublisherList } from './DomainFavoritePublisherList';
import {
    DomainFavoritePublisherListFromJSON,
    DomainFavoritePublisherListFromJSONTyped,
    DomainFavoritePublisherListToJSON,
    DomainFavoritePublisherListToJSONTyped,
} from './DomainFavoritePublisherList';
import type { DomainAnalyticsPublisher } from './DomainAnalyticsPublisher';
import {
    DomainAnalyticsPublisherFromJSON,
    DomainAnalyticsPublisherFromJSONTyped,
    DomainAnalyticsPublisherToJSON,
    DomainAnalyticsPublisherToJSONTyped,
} from './DomainAnalyticsPublisher';
import type { DomainPublisherMessage } from './DomainPublisherMessage';
import {
    DomainPublisherMessageFromJSON,
    DomainPublisherMessageFromJSONTyped,
    DomainPublisherMessageToJSON,
    DomainPublisherMessageToJSONTyped,
} from './DomainPublisherMessage';

/**
 * 
 * @export
 * @interface DomainPublisherConversation
 */
export interface DomainPublisherConversation {
    /**
     * 
     * @type {number}
     * @memberof DomainPublisherConversation
     */
    conversationId?: number;
    /**
     * 
     * @type {string}
     * @memberof DomainPublisherConversation
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainPublisherConversation
     */
    lastMessageAt?: string;
    /**
     * Optional: Include list details
     * @type {DomainFavoritePublisherList}
     * @memberof DomainPublisherConversation
     */
    list?: DomainFavoritePublisherList;
    /**
     * 
     * @type {number}
     * @memberof DomainPublisherConversation
     */
    listId?: number;
    /**
     * Computed fields
     * @type {number}
     * @memberof DomainPublisherConversation
     */
    messageCount?: number;
    /**
     * Optional: Include messages when fetching with details
     * @type {Array<DomainPublisherMessage>}
     * @memberof DomainPublisherConversation
     */
    messages?: Array<DomainPublisherMessage>;
    /**
     * 
     * @type {number}
     * @memberof DomainPublisherConversation
     */
    organizationId?: number;
    /**
     * Optional: Include publisher details
     * @type {DomainAnalyticsPublisher}
     * @memberof DomainPublisherConversation
     */
    publisher?: DomainAnalyticsPublisher;
    /**
     * 
     * @type {string}
     * @memberof DomainPublisherConversation
     */
    publisherDomain?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainPublisherConversation
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainPublisherConversation
     */
    subject?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainPublisherConversation
     */
    updatedAt?: string;
}

/**
 * Check if a given object implements the DomainPublisherConversation interface.
 */
export function instanceOfDomainPublisherConversation(value: object): value is DomainPublisherConversation {
    return true;
}

export function DomainPublisherConversationFromJSON(json: any): DomainPublisherConversation {
    return DomainPublisherConversationFromJSONTyped(json, false);
}

export function DomainPublisherConversationFromJSONTyped(json: any, ignoreDiscriminator: boolean): DomainPublisherConversation {
    if (json == null) {
        return json;
    }
    return {
        
        'conversationId': json['conversation_id'] == null ? undefined : json['conversation_id'],
        'createdAt': json['created_at'] == null ? undefined : json['created_at'],
        'lastMessageAt': json['last_message_at'] == null ? undefined : json['last_message_at'],
        'list': json['list'] == null ? undefined : DomainFavoritePublisherListFromJSON(json['list']),
        'listId': json['list_id'] == null ? undefined : json['list_id'],
        'messageCount': json['message_count'] == null ? undefined : json['message_count'],
        'messages': json['messages'] == null ? undefined : ((json['messages'] as Array<any>).map(DomainPublisherMessageFromJSON)),
        'organizationId': json['organization_id'] == null ? undefined : json['organization_id'],
        'publisher': json['publisher'] == null ? undefined : DomainAnalyticsPublisherFromJSON(json['publisher']),
        'publisherDomain': json['publisher_domain'] == null ? undefined : json['publisher_domain'],
        'status': json['status'] == null ? undefined : json['status'],
        'subject': json['subject'] == null ? undefined : json['subject'],
        'updatedAt': json['updated_at'] == null ? undefined : json['updated_at'],
    };
}

export function DomainPublisherConversationToJSON(json: any): DomainPublisherConversation {
    return DomainPublisherConversationToJSONTyped(json, false);
}

export function DomainPublisherConversationToJSONTyped(value?: DomainPublisherConversation | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'conversation_id': value['conversationId'],
        'created_at': value['createdAt'],
        'last_message_at': value['lastMessageAt'],
        'list': DomainFavoritePublisherListToJSON(value['list']),
        'list_id': value['listId'],
        'message_count': value['messageCount'],
        'messages': value['messages'] == null ? undefined : ((value['messages'] as Array<any>).map(DomainPublisherMessageToJSON)),
        'organization_id': value['organizationId'],
        'publisher': DomainAnalyticsPublisherToJSON(value['publisher']),
        'publisher_domain': value['publisherDomain'],
        'status': value['status'],
        'subject': value['subject'],
        'updated_at': value['updatedAt'],
    };
}

