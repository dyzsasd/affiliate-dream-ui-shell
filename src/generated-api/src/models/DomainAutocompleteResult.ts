/* tslint:disable */
/* eslint-disable */
/**
 * Affiliate Backend API
 * API Server for Affiliate Backend Application
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DomainAutocompleteResult
 */
export interface DomainAutocompleteResult {
    /**
     * 
     * @type {string}
     * @memberof DomainAutocompleteResult
     */
    domain?: string;
    /**
     * 
     * @type {number}
     * @memberof DomainAutocompleteResult
     */
    id?: number;
    /**
     * Display name (domain for now)
     * @type {string}
     * @memberof DomainAutocompleteResult
     */
    name?: string;
    /**
     * "advertiser" or "publisher"
     * @type {string}
     * @memberof DomainAutocompleteResult
     */
    type?: string;
}

/**
 * Check if a given object implements the DomainAutocompleteResult interface.
 */
export function instanceOfDomainAutocompleteResult(value: object): value is DomainAutocompleteResult {
    return true;
}

export function DomainAutocompleteResultFromJSON(json: any): DomainAutocompleteResult {
    return DomainAutocompleteResultFromJSONTyped(json, false);
}

export function DomainAutocompleteResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): DomainAutocompleteResult {
    if (json == null) {
        return json;
    }
    return {
        
        'domain': json['domain'] == null ? undefined : json['domain'],
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'type': json['type'] == null ? undefined : json['type'],
    };
}

export function DomainAutocompleteResultToJSON(json: any): DomainAutocompleteResult {
    return DomainAutocompleteResultToJSONTyped(json, false);
}

export function DomainAutocompleteResultToJSONTyped(value?: DomainAutocompleteResult | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'domain': value['domain'],
        'id': value['id'],
        'name': value['name'],
        'type': value['type'],
    };
}

