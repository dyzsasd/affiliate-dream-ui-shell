/* tslint:disable */
/* eslint-disable */
/**
 * Affiliate Backend API
 * API Server for Affiliate Backend Application
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DomainActivityType } from './DomainActivityType';
import {
    DomainActivityTypeFromJSON,
    DomainActivityTypeFromJSONTyped,
    DomainActivityTypeToJSON,
    DomainActivityTypeToJSONTyped,
} from './DomainActivityType';

/**
 * 
 * @export
 * @interface DomainActivity
 */
export interface DomainActivity {
    /**
     * Context-specific fields
     * @type {number}
     * @memberof DomainActivity
     */
    campaignId?: number;
    /**
     * 
     * @type {string}
     * @memberof DomainActivity
     */
    campaignName?: string;
    /**
     * 
     * @type {number}
     * @memberof DomainActivity
     */
    clientId?: number;
    /**
     * 
     * @type {string}
     * @memberof DomainActivity
     */
    clientName?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainActivity
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainActivity
     */
    id?: string;
    /**
     * 
     * @type {{ [key: string]: any | undefined; }}
     * @memberof DomainActivity
     */
    metadata?: { [key: string]: any | undefined; };
    /**
     * 
     * @type {string}
     * @memberof DomainActivity
     */
    severity?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainActivity
     */
    timestamp?: string;
    /**
     * 
     * @type {DomainActivityType}
     * @memberof DomainActivity
     */
    type?: DomainActivityType;
}



/**
 * Check if a given object implements the DomainActivity interface.
 */
export function instanceOfDomainActivity(value: object): value is DomainActivity {
    return true;
}

export function DomainActivityFromJSON(json: any): DomainActivity {
    return DomainActivityFromJSONTyped(json, false);
}

export function DomainActivityFromJSONTyped(json: any, ignoreDiscriminator: boolean): DomainActivity {
    if (json == null) {
        return json;
    }
    return {
        
        'campaignId': json['campaign_id'] == null ? undefined : json['campaign_id'],
        'campaignName': json['campaign_name'] == null ? undefined : json['campaign_name'],
        'clientId': json['client_id'] == null ? undefined : json['client_id'],
        'clientName': json['client_name'] == null ? undefined : json['client_name'],
        'description': json['description'] == null ? undefined : json['description'],
        'id': json['id'] == null ? undefined : json['id'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'severity': json['severity'] == null ? undefined : json['severity'],
        'timestamp': json['timestamp'] == null ? undefined : json['timestamp'],
        'type': json['type'] == null ? undefined : DomainActivityTypeFromJSON(json['type']),
    };
}

export function DomainActivityToJSON(json: any): DomainActivity {
    return DomainActivityToJSONTyped(json, false);
}

export function DomainActivityToJSONTyped(value?: DomainActivity | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'campaign_id': value['campaignId'],
        'campaign_name': value['campaignName'],
        'client_id': value['clientId'],
        'client_name': value['clientName'],
        'description': value['description'],
        'id': value['id'],
        'metadata': value['metadata'],
        'severity': value['severity'],
        'timestamp': value['timestamp'],
        'type': DomainActivityTypeToJSON(value['type']),
    };
}

