/* tslint:disable */
/* eslint-disable */
/**
 * Affiliate Backend API
 * API Server for Affiliate Backend Application
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AnalyticsAdvertisersIdGet200Response,
  AnalyticsAdvertisersPost201Response,
  AnalyticsAffiliatesIdGet200Response,
  AnalyticsAffiliatesPost201Response,
  AnalyticsAutocompleteGet200Response,
  HandlersCreateAdvertiserRequest,
  HandlersCreatePublisherRequest,
  HandlersErrorResponse,
} from '../models/index';
import {
    AnalyticsAdvertisersIdGet200ResponseFromJSON,
    AnalyticsAdvertisersIdGet200ResponseToJSON,
    AnalyticsAdvertisersPost201ResponseFromJSON,
    AnalyticsAdvertisersPost201ResponseToJSON,
    AnalyticsAffiliatesIdGet200ResponseFromJSON,
    AnalyticsAffiliatesIdGet200ResponseToJSON,
    AnalyticsAffiliatesPost201ResponseFromJSON,
    AnalyticsAffiliatesPost201ResponseToJSON,
    AnalyticsAutocompleteGet200ResponseFromJSON,
    AnalyticsAutocompleteGet200ResponseToJSON,
    HandlersCreateAdvertiserRequestFromJSON,
    HandlersCreateAdvertiserRequestToJSON,
    HandlersCreatePublisherRequestFromJSON,
    HandlersCreatePublisherRequestToJSON,
    HandlersErrorResponseFromJSON,
    HandlersErrorResponseToJSON,
} from '../models/index';

export interface AnalyticsAdvertisersIdGetRequest {
    id: number;
}

export interface AnalyticsAdvertisersPostRequest {
    advertiser: HandlersCreateAdvertiserRequest;
}

export interface AnalyticsAffiliatesDomainDomainGetRequest {
    domain: string;
}

export interface AnalyticsAffiliatesIdGetRequest {
    id: number;
}

export interface AnalyticsAffiliatesPostRequest {
    publisher: HandlersCreatePublisherRequest;
}

export interface AnalyticsAutocompleteGetRequest {
    q: string;
    type?: AnalyticsAutocompleteGetTypeEnum;
    limit?: number;
}

/**
 * 
 */
export class AnalyticsApi extends runtime.BaseAPI {

    /**
     * Retrieve detailed analytics data for a specific advertiser
     * Get advertiser analytics data
     */
    async analyticsAdvertisersIdGetRaw(requestParameters: AnalyticsAdvertisersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnalyticsAdvertisersIdGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling analyticsAdvertisersIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/analytics/advertisers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalyticsAdvertisersIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve detailed analytics data for a specific advertiser
     * Get advertiser analytics data
     */
    async analyticsAdvertisersIdGet(requestParameters: AnalyticsAdvertisersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnalyticsAdvertisersIdGet200Response> {
        const response = await this.analyticsAdvertisersIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new advertiser analytics entry
     * Create advertiser analytics data
     */
    async analyticsAdvertisersPostRaw(requestParameters: AnalyticsAdvertisersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnalyticsAdvertisersPost201Response>> {
        if (requestParameters['advertiser'] == null) {
            throw new runtime.RequiredError(
                'advertiser',
                'Required parameter "advertiser" was null or undefined when calling analyticsAdvertisersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/analytics/advertisers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HandlersCreateAdvertiserRequestToJSON(requestParameters['advertiser']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalyticsAdvertisersPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create a new advertiser analytics entry
     * Create advertiser analytics data
     */
    async analyticsAdvertisersPost(requestParameters: AnalyticsAdvertisersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnalyticsAdvertisersPost201Response> {
        const response = await this.analyticsAdvertisersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve detailed analytics data for a specific publisher (affiliate) by domain name
     * Get publisher analytics data by domain
     */
    async analyticsAffiliatesDomainDomainGetRaw(requestParameters: AnalyticsAffiliatesDomainDomainGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnalyticsAffiliatesIdGet200Response>> {
        if (requestParameters['domain'] == null) {
            throw new runtime.RequiredError(
                'domain',
                'Required parameter "domain" was null or undefined when calling analyticsAffiliatesDomainDomainGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/analytics/affiliates/domain/{domain}`.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters['domain']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalyticsAffiliatesIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve detailed analytics data for a specific publisher (affiliate) by domain name
     * Get publisher analytics data by domain
     */
    async analyticsAffiliatesDomainDomainGet(requestParameters: AnalyticsAffiliatesDomainDomainGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnalyticsAffiliatesIdGet200Response> {
        const response = await this.analyticsAffiliatesDomainDomainGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve detailed analytics data for a specific publisher (affiliate)
     * Get publisher analytics data
     */
    async analyticsAffiliatesIdGetRaw(requestParameters: AnalyticsAffiliatesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnalyticsAffiliatesIdGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling analyticsAffiliatesIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/analytics/affiliates/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalyticsAffiliatesIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve detailed analytics data for a specific publisher (affiliate)
     * Get publisher analytics data
     */
    async analyticsAffiliatesIdGet(requestParameters: AnalyticsAffiliatesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnalyticsAffiliatesIdGet200Response> {
        const response = await this.analyticsAffiliatesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new publisher analytics entry
     * Create publisher analytics data
     */
    async analyticsAffiliatesPostRaw(requestParameters: AnalyticsAffiliatesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnalyticsAffiliatesPost201Response>> {
        if (requestParameters['publisher'] == null) {
            throw new runtime.RequiredError(
                'publisher',
                'Required parameter "publisher" was null or undefined when calling analyticsAffiliatesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/analytics/affiliates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HandlersCreatePublisherRequestToJSON(requestParameters['publisher']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalyticsAffiliatesPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create a new publisher analytics entry
     * Create publisher analytics data
     */
    async analyticsAffiliatesPost(requestParameters: AnalyticsAffiliatesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnalyticsAffiliatesPost201Response> {
        const response = await this.analyticsAffiliatesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search advertisers and/or publishers by domain name for autocompletion (minimum 3 characters)
     * Search organizations for autocompletion
     */
    async analyticsAutocompleteGetRaw(requestParameters: AnalyticsAutocompleteGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnalyticsAutocompleteGet200Response>> {
        if (requestParameters['q'] == null) {
            throw new runtime.RequiredError(
                'q',
                'Required parameter "q" was null or undefined when calling analyticsAutocompleteGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/analytics/autocomplete`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalyticsAutocompleteGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Search advertisers and/or publishers by domain name for autocompletion (minimum 3 characters)
     * Search organizations for autocompletion
     */
    async analyticsAutocompleteGet(requestParameters: AnalyticsAutocompleteGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnalyticsAutocompleteGet200Response> {
        const response = await this.analyticsAutocompleteGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AnalyticsAutocompleteGetTypeEnum = {
    Advertiser: 'advertiser',
    Publisher: 'publisher',
    Both: 'both'
} as const;
export type AnalyticsAutocompleteGetTypeEnum = typeof AnalyticsAutocompleteGetTypeEnum[keyof typeof AnalyticsAutocompleteGetTypeEnum];
