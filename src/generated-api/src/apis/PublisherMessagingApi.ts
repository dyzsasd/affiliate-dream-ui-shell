/* tslint:disable */
/* eslint-disable */
/**
 * Affiliate Backend API
 * API Server for Affiliate Backend Application
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DomainAddExternalMessageRequest,
  DomainConversationListResponse,
  DomainConversationWithMessagesResponse,
  DomainCreateConversationRequest,
  DomainPublisherConversation,
  DomainPublisherMessage,
  DomainSendMessageRequest,
  DomainUpdateConversationStatusRequest,
  HandlersErrorResponse,
} from '../models/index';
import {
    DomainAddExternalMessageRequestFromJSON,
    DomainAddExternalMessageRequestToJSON,
    DomainConversationListResponseFromJSON,
    DomainConversationListResponseToJSON,
    DomainConversationWithMessagesResponseFromJSON,
    DomainConversationWithMessagesResponseToJSON,
    DomainCreateConversationRequestFromJSON,
    DomainCreateConversationRequestToJSON,
    DomainPublisherConversationFromJSON,
    DomainPublisherConversationToJSON,
    DomainPublisherMessageFromJSON,
    DomainPublisherMessageToJSON,
    DomainSendMessageRequestFromJSON,
    DomainSendMessageRequestToJSON,
    DomainUpdateConversationStatusRequestFromJSON,
    DomainUpdateConversationStatusRequestToJSON,
    HandlersErrorResponseFromJSON,
    HandlersErrorResponseToJSON,
} from '../models/index';

export interface PublisherMessagingConversationsConversationIdDeleteRequest {
    conversationId: number;
}

export interface PublisherMessagingConversationsConversationIdExternalMessagesPostRequest {
    conversationId: number;
    request: DomainAddExternalMessageRequest;
}

export interface PublisherMessagingConversationsConversationIdGetRequest {
    conversationId: number;
}

export interface PublisherMessagingConversationsConversationIdMessagesPostRequest {
    conversationId: number;
    request: DomainSendMessageRequest;
}

export interface PublisherMessagingConversationsConversationIdStatusPutRequest {
    conversationId: number;
    request: DomainUpdateConversationStatusRequest;
}

export interface PublisherMessagingConversationsGetRequest {
    status?: string;
    page?: number;
    pageSize?: number;
}

export interface PublisherMessagingConversationsPostRequest {
    request: DomainCreateConversationRequest;
}

/**
 * 
 */
export class PublisherMessagingApi extends runtime.BaseAPI {

    /**
     * Deletes a conversation and all associated messages
     * Delete conversation
     */
    async publisherMessagingConversationsConversationIdDeleteRaw(requestParameters: PublisherMessagingConversationsConversationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['conversationId'] == null) {
            throw new runtime.RequiredError(
                'conversationId',
                'Required parameter "conversationId" was null or undefined when calling publisherMessagingConversationsConversationIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/publisher-messaging/conversations/{conversation_id}`.replace(`{${"conversation_id"}}`, encodeURIComponent(String(requestParameters['conversationId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a conversation and all associated messages
     * Delete conversation
     */
    async publisherMessagingConversationsConversationIdDelete(requestParameters: PublisherMessagingConversationsConversationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.publisherMessagingConversationsConversationIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Allows external services to add messages to existing conversations (e.g., publisher replies)
     * Add external message to conversation
     */
    async publisherMessagingConversationsConversationIdExternalMessagesPostRaw(requestParameters: PublisherMessagingConversationsConversationIdExternalMessagesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainPublisherMessage>> {
        if (requestParameters['conversationId'] == null) {
            throw new runtime.RequiredError(
                'conversationId',
                'Required parameter "conversationId" was null or undefined when calling publisherMessagingConversationsConversationIdExternalMessagesPost().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling publisherMessagingConversationsConversationIdExternalMessagesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/publisher-messaging/conversations/{conversation_id}/external-messages`.replace(`{${"conversation_id"}}`, encodeURIComponent(String(requestParameters['conversationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DomainAddExternalMessageRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainPublisherMessageFromJSON(jsonValue));
    }

    /**
     * Allows external services to add messages to existing conversations (e.g., publisher replies)
     * Add external message to conversation
     */
    async publisherMessagingConversationsConversationIdExternalMessagesPost(requestParameters: PublisherMessagingConversationsConversationIdExternalMessagesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainPublisherMessage> {
        const response = await this.publisherMessagingConversationsConversationIdExternalMessagesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific conversation along with its messages
     * Get conversation with messages
     */
    async publisherMessagingConversationsConversationIdGetRaw(requestParameters: PublisherMessagingConversationsConversationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainConversationWithMessagesResponse>> {
        if (requestParameters['conversationId'] == null) {
            throw new runtime.RequiredError(
                'conversationId',
                'Required parameter "conversationId" was null or undefined when calling publisherMessagingConversationsConversationIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/publisher-messaging/conversations/{conversation_id}`.replace(`{${"conversation_id"}}`, encodeURIComponent(String(requestParameters['conversationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainConversationWithMessagesResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific conversation along with its messages
     * Get conversation with messages
     */
    async publisherMessagingConversationsConversationIdGet(requestParameters: PublisherMessagingConversationsConversationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainConversationWithMessagesResponse> {
        const response = await this.publisherMessagingConversationsConversationIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new message to an existing conversation
     * Add message to conversation
     */
    async publisherMessagingConversationsConversationIdMessagesPostRaw(requestParameters: PublisherMessagingConversationsConversationIdMessagesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainPublisherMessage>> {
        if (requestParameters['conversationId'] == null) {
            throw new runtime.RequiredError(
                'conversationId',
                'Required parameter "conversationId" was null or undefined when calling publisherMessagingConversationsConversationIdMessagesPost().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling publisherMessagingConversationsConversationIdMessagesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/publisher-messaging/conversations/{conversation_id}/messages`.replace(`{${"conversation_id"}}`, encodeURIComponent(String(requestParameters['conversationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DomainSendMessageRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainPublisherMessageFromJSON(jsonValue));
    }

    /**
     * Adds a new message to an existing conversation
     * Add message to conversation
     */
    async publisherMessagingConversationsConversationIdMessagesPost(requestParameters: PublisherMessagingConversationsConversationIdMessagesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainPublisherMessage> {
        const response = await this.publisherMessagingConversationsConversationIdMessagesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the status of a conversation (e.g., close conversation)
     * Update conversation status
     */
    async publisherMessagingConversationsConversationIdStatusPutRaw(requestParameters: PublisherMessagingConversationsConversationIdStatusPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainPublisherConversation>> {
        if (requestParameters['conversationId'] == null) {
            throw new runtime.RequiredError(
                'conversationId',
                'Required parameter "conversationId" was null or undefined when calling publisherMessagingConversationsConversationIdStatusPut().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling publisherMessagingConversationsConversationIdStatusPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/publisher-messaging/conversations/{conversation_id}/status`.replace(`{${"conversation_id"}}`, encodeURIComponent(String(requestParameters['conversationId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DomainUpdateConversationStatusRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainPublisherConversationFromJSON(jsonValue));
    }

    /**
     * Updates the status of a conversation (e.g., close conversation)
     * Update conversation status
     */
    async publisherMessagingConversationsConversationIdStatusPut(requestParameters: PublisherMessagingConversationsConversationIdStatusPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainPublisherConversation> {
        const response = await this.publisherMessagingConversationsConversationIdStatusPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a paginated list of conversations for the organization
     * Get conversations for organization
     */
    async publisherMessagingConversationsGetRaw(requestParameters: PublisherMessagingConversationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainConversationListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/publisher-messaging/conversations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainConversationListResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a paginated list of conversations for the organization
     * Get conversations for organization
     */
    async publisherMessagingConversationsGet(requestParameters: PublisherMessagingConversationsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainConversationListResponse> {
        const response = await this.publisherMessagingConversationsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Initiates a new conversation with a publisher from a favorite list
     * Create a new conversation with a publisher
     */
    async publisherMessagingConversationsPostRaw(requestParameters: PublisherMessagingConversationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainPublisherConversation>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling publisherMessagingConversationsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/publisher-messaging/conversations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DomainCreateConversationRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainPublisherConversationFromJSON(jsonValue));
    }

    /**
     * Initiates a new conversation with a publisher from a favorite list
     * Create a new conversation with a publisher
     */
    async publisherMessagingConversationsPost(requestParameters: PublisherMessagingConversationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainPublisherConversation> {
        const response = await this.publisherMessagingConversationsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
