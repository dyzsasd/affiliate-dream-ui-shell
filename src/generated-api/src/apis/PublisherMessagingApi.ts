/* tslint:disable */
/* eslint-disable */
/**
 * Affiliate Backend API
 * API Server for Affiliate Backend Application
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DomainAddExternalMessageRequest,
  DomainConversationListResponse,
  DomainConversationWithMessagesResponse,
  DomainCreateConversationRequest,
  DomainPublisherConversation,
  DomainPublisherMessage,
  DomainSendMessageRequest,
  DomainUpdateConversationStatusRequest,
  HandlersErrorResponse,
} from '../models/index';
import {
    DomainAddExternalMessageRequestFromJSON,
    DomainAddExternalMessageRequestToJSON,
    DomainConversationListResponseFromJSON,
    DomainConversationListResponseToJSON,
    DomainConversationWithMessagesResponseFromJSON,
    DomainConversationWithMessagesResponseToJSON,
    DomainCreateConversationRequestFromJSON,
    DomainCreateConversationRequestToJSON,
    DomainPublisherConversationFromJSON,
    DomainPublisherConversationToJSON,
    DomainPublisherMessageFromJSON,
    DomainPublisherMessageToJSON,
    DomainSendMessageRequestFromJSON,
    DomainSendMessageRequestToJSON,
    DomainUpdateConversationStatusRequestFromJSON,
    DomainUpdateConversationStatusRequestToJSON,
    HandlersErrorResponseFromJSON,
    HandlersErrorResponseToJSON,
} from '../models/index';

export interface ApiV1PublisherMessagingConversationsConversationIdDeleteRequest {
    conversationId: number;
}

export interface ApiV1PublisherMessagingConversationsConversationIdExternalMessagesPostRequest {
    conversationId: number;
    request: DomainAddExternalMessageRequest;
}

export interface ApiV1PublisherMessagingConversationsConversationIdGetRequest {
    conversationId: number;
}

export interface ApiV1PublisherMessagingConversationsConversationIdMessagesPostRequest {
    conversationId: number;
    request: DomainSendMessageRequest;
}

export interface ApiV1PublisherMessagingConversationsConversationIdStatusPutRequest {
    conversationId: number;
    request: DomainUpdateConversationStatusRequest;
}

export interface ApiV1PublisherMessagingConversationsGetRequest {
    status?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiV1PublisherMessagingConversationsPostRequest {
    request: DomainCreateConversationRequest;
}

/**
 * 
 */
export class PublisherMessagingApi extends runtime.BaseAPI {

    /**
     * Deletes a conversation and all associated messages
     * Delete conversation
     */
    async apiV1PublisherMessagingConversationsConversationIdDeleteRaw(requestParameters: ApiV1PublisherMessagingConversationsConversationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['conversationId'] == null) {
            throw new runtime.RequiredError(
                'conversationId',
                'Required parameter "conversationId" was null or undefined when calling apiV1PublisherMessagingConversationsConversationIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/publisher-messaging/conversations/{conversation_id}`.replace(`{${"conversation_id"}}`, encodeURIComponent(String(requestParameters['conversationId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a conversation and all associated messages
     * Delete conversation
     */
    async apiV1PublisherMessagingConversationsConversationIdDelete(requestParameters: ApiV1PublisherMessagingConversationsConversationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1PublisherMessagingConversationsConversationIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Allows external services to add messages to existing conversations (e.g., publisher replies)
     * Add external message to conversation
     */
    async apiV1PublisherMessagingConversationsConversationIdExternalMessagesPostRaw(requestParameters: ApiV1PublisherMessagingConversationsConversationIdExternalMessagesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainPublisherMessage>> {
        if (requestParameters['conversationId'] == null) {
            throw new runtime.RequiredError(
                'conversationId',
                'Required parameter "conversationId" was null or undefined when calling apiV1PublisherMessagingConversationsConversationIdExternalMessagesPost().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling apiV1PublisherMessagingConversationsConversationIdExternalMessagesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/publisher-messaging/conversations/{conversation_id}/external-messages`.replace(`{${"conversation_id"}}`, encodeURIComponent(String(requestParameters['conversationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DomainAddExternalMessageRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainPublisherMessageFromJSON(jsonValue));
    }

    /**
     * Allows external services to add messages to existing conversations (e.g., publisher replies)
     * Add external message to conversation
     */
    async apiV1PublisherMessagingConversationsConversationIdExternalMessagesPost(requestParameters: ApiV1PublisherMessagingConversationsConversationIdExternalMessagesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainPublisherMessage> {
        const response = await this.apiV1PublisherMessagingConversationsConversationIdExternalMessagesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific conversation along with its messages
     * Get conversation with messages
     */
    async apiV1PublisherMessagingConversationsConversationIdGetRaw(requestParameters: ApiV1PublisherMessagingConversationsConversationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainConversationWithMessagesResponse>> {
        if (requestParameters['conversationId'] == null) {
            throw new runtime.RequiredError(
                'conversationId',
                'Required parameter "conversationId" was null or undefined when calling apiV1PublisherMessagingConversationsConversationIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/publisher-messaging/conversations/{conversation_id}`.replace(`{${"conversation_id"}}`, encodeURIComponent(String(requestParameters['conversationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainConversationWithMessagesResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific conversation along with its messages
     * Get conversation with messages
     */
    async apiV1PublisherMessagingConversationsConversationIdGet(requestParameters: ApiV1PublisherMessagingConversationsConversationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainConversationWithMessagesResponse> {
        const response = await this.apiV1PublisherMessagingConversationsConversationIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new message to an existing conversation
     * Add message to conversation
     */
    async apiV1PublisherMessagingConversationsConversationIdMessagesPostRaw(requestParameters: ApiV1PublisherMessagingConversationsConversationIdMessagesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainPublisherMessage>> {
        if (requestParameters['conversationId'] == null) {
            throw new runtime.RequiredError(
                'conversationId',
                'Required parameter "conversationId" was null or undefined when calling apiV1PublisherMessagingConversationsConversationIdMessagesPost().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling apiV1PublisherMessagingConversationsConversationIdMessagesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/publisher-messaging/conversations/{conversation_id}/messages`.replace(`{${"conversation_id"}}`, encodeURIComponent(String(requestParameters['conversationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DomainSendMessageRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainPublisherMessageFromJSON(jsonValue));
    }

    /**
     * Adds a new message to an existing conversation
     * Add message to conversation
     */
    async apiV1PublisherMessagingConversationsConversationIdMessagesPost(requestParameters: ApiV1PublisherMessagingConversationsConversationIdMessagesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainPublisherMessage> {
        const response = await this.apiV1PublisherMessagingConversationsConversationIdMessagesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the status of a conversation (e.g., close conversation)
     * Update conversation status
     */
    async apiV1PublisherMessagingConversationsConversationIdStatusPutRaw(requestParameters: ApiV1PublisherMessagingConversationsConversationIdStatusPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainPublisherConversation>> {
        if (requestParameters['conversationId'] == null) {
            throw new runtime.RequiredError(
                'conversationId',
                'Required parameter "conversationId" was null or undefined when calling apiV1PublisherMessagingConversationsConversationIdStatusPut().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling apiV1PublisherMessagingConversationsConversationIdStatusPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/publisher-messaging/conversations/{conversation_id}/status`.replace(`{${"conversation_id"}}`, encodeURIComponent(String(requestParameters['conversationId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DomainUpdateConversationStatusRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainPublisherConversationFromJSON(jsonValue));
    }

    /**
     * Updates the status of a conversation (e.g., close conversation)
     * Update conversation status
     */
    async apiV1PublisherMessagingConversationsConversationIdStatusPut(requestParameters: ApiV1PublisherMessagingConversationsConversationIdStatusPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainPublisherConversation> {
        const response = await this.apiV1PublisherMessagingConversationsConversationIdStatusPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a paginated list of conversations for the organization
     * Get conversations for organization
     */
    async apiV1PublisherMessagingConversationsGetRaw(requestParameters: ApiV1PublisherMessagingConversationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainConversationListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/publisher-messaging/conversations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainConversationListResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a paginated list of conversations for the organization
     * Get conversations for organization
     */
    async apiV1PublisherMessagingConversationsGet(requestParameters: ApiV1PublisherMessagingConversationsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainConversationListResponse> {
        const response = await this.apiV1PublisherMessagingConversationsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Initiates a new conversation with a publisher from a favorite list
     * Create a new conversation with a publisher
     */
    async apiV1PublisherMessagingConversationsPostRaw(requestParameters: ApiV1PublisherMessagingConversationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainPublisherConversation>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling apiV1PublisherMessagingConversationsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/publisher-messaging/conversations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DomainCreateConversationRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainPublisherConversationFromJSON(jsonValue));
    }

    /**
     * Initiates a new conversation with a publisher from a favorite list
     * Create a new conversation with a publisher
     */
    async apiV1PublisherMessagingConversationsPost(requestParameters: ApiV1PublisherMessagingConversationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainPublisherConversation> {
        const response = await this.apiV1PublisherMessagingConversationsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
