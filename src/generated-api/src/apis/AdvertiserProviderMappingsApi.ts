/* tslint:disable */
/* eslint-disable */
/**
 * Affiliate Backend API
 * API Server for Affiliate Backend Application
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ModelsCreateAdvertiserProviderMappingRequest,
  ModelsCreateAdvertiserProviderMappingResponse,
  ModelsUpdateAdvertiserProviderMappingRequest,
} from '../models/index';
import {
    ModelsCreateAdvertiserProviderMappingRequestFromJSON,
    ModelsCreateAdvertiserProviderMappingRequestToJSON,
    ModelsCreateAdvertiserProviderMappingResponseFromJSON,
    ModelsCreateAdvertiserProviderMappingResponseToJSON,
    ModelsUpdateAdvertiserProviderMappingRequestFromJSON,
    ModelsUpdateAdvertiserProviderMappingRequestToJSON,
} from '../models/index';

export interface AdvertiserProviderMappingsMappingIdDeleteRequest {
    mappingId: number;
}

export interface AdvertiserProviderMappingsMappingIdPutRequest {
    mappingId: number;
    request: ModelsUpdateAdvertiserProviderMappingRequest;
}

export interface AdvertiserProviderMappingsPostRequest {
    request: ModelsCreateAdvertiserProviderMappingRequest;
}

/**
 * 
 */
export class AdvertiserProviderMappingsApi extends runtime.BaseAPI {

    /**
     * Deletes an advertiser provider mapping by mapping ID
     * Delete advertiser provider mapping
     */
    async advertiserProviderMappingsMappingIdDeleteRaw(requestParameters: AdvertiserProviderMappingsMappingIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mappingId'] == null) {
            throw new runtime.RequiredError(
                'mappingId',
                'Required parameter "mappingId" was null or undefined when calling advertiserProviderMappingsMappingIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/advertiser-provider-mappings/{mappingId}`.replace(`{${"mappingId"}}`, encodeURIComponent(String(requestParameters['mappingId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an advertiser provider mapping by mapping ID
     * Delete advertiser provider mapping
     */
    async advertiserProviderMappingsMappingIdDelete(requestParameters: AdvertiserProviderMappingsMappingIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.advertiserProviderMappingsMappingIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Updates an advertiser provider mapping by mapping ID
     * Update advertiser provider mapping
     */
    async advertiserProviderMappingsMappingIdPutRaw(requestParameters: AdvertiserProviderMappingsMappingIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string | undefined; }>> {
        if (requestParameters['mappingId'] == null) {
            throw new runtime.RequiredError(
                'mappingId',
                'Required parameter "mappingId" was null or undefined when calling advertiserProviderMappingsMappingIdPut().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling advertiserProviderMappingsMappingIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/advertiser-provider-mappings/{mappingId}`.replace(`{${"mappingId"}}`, encodeURIComponent(String(requestParameters['mappingId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModelsUpdateAdvertiserProviderMappingRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Updates an advertiser provider mapping by mapping ID
     * Update advertiser provider mapping
     */
    async advertiserProviderMappingsMappingIdPut(requestParameters: AdvertiserProviderMappingsMappingIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string | undefined; }> {
        const response = await this.advertiserProviderMappingsMappingIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new advertiser provider mapping
     * Create advertiser provider mapping
     */
    async advertiserProviderMappingsPostRaw(requestParameters: AdvertiserProviderMappingsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsCreateAdvertiserProviderMappingResponse>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling advertiserProviderMappingsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/advertiser-provider-mappings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelsCreateAdvertiserProviderMappingRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsCreateAdvertiserProviderMappingResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new advertiser provider mapping
     * Create advertiser provider mapping
     */
    async advertiserProviderMappingsPost(requestParameters: AdvertiserProviderMappingsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsCreateAdvertiserProviderMappingResponse> {
        const response = await this.advertiserProviderMappingsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
