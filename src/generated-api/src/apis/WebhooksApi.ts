/* tslint:disable */
/* eslint-disable */
/**
 * Affiliate Backend API
 * API Server for Affiliate Backend Application
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HandlersSupabaseUserWebhookPayload,
} from '../models/index';
import {
    HandlersSupabaseUserWebhookPayloadFromJSON,
    HandlersSupabaseUserWebhookPayloadToJSON,
} from '../models/index';

export interface PublicWebhooksSupabaseNewUserPostRequest {
    payload: HandlersSupabaseUserWebhookPayload;
}

/**
 * 
 */
export class WebhooksApi extends runtime.BaseAPI {

    /**
     * Process webhook from Supabase when a new user is created
     * Handle Supabase new user webhook
     */
    async publicWebhooksSupabaseNewUserPostRaw(requestParameters: PublicWebhooksSupabaseNewUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string | undefined; }>> {
        if (requestParameters['payload'] == null) {
            throw new runtime.RequiredError(
                'payload',
                'Required parameter "payload" was null or undefined when calling publicWebhooksSupabaseNewUserPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/public/webhooks/supabase/new-user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HandlersSupabaseUserWebhookPayloadToJSON(requestParameters['payload']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Process webhook from Supabase when a new user is created
     * Handle Supabase new user webhook
     */
    async publicWebhooksSupabaseNewUserPost(requestParameters: PublicWebhooksSupabaseNewUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string | undefined; }> {
        const response = await this.publicWebhooksSupabaseNewUserPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
