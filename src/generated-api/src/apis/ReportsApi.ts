/* tslint:disable */
/* eslint-disable */
/**
 * Affiliate Backend API
 * API Server for Affiliate Backend Application
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HandlersClicksReportResponse,
  HandlersConversionsReportResponse,
  HandlersDailyPerformanceReportResponse,
  HandlersErrorResponse,
  HandlersPerformanceSummaryResponse,
  HandlersPerformanceTimeSeriesResponse,
} from '../models/index';
import {
    HandlersClicksReportResponseFromJSON,
    HandlersClicksReportResponseToJSON,
    HandlersConversionsReportResponseFromJSON,
    HandlersConversionsReportResponseToJSON,
    HandlersDailyPerformanceReportResponseFromJSON,
    HandlersDailyPerformanceReportResponseToJSON,
    HandlersErrorResponseFromJSON,
    HandlersErrorResponseToJSON,
    HandlersPerformanceSummaryResponseFromJSON,
    HandlersPerformanceSummaryResponseToJSON,
    HandlersPerformanceTimeSeriesResponseFromJSON,
    HandlersPerformanceTimeSeriesResponseToJSON,
} from '../models/index';

export interface ApiV1ReportsClicksGetRequest {
    startDate: string;
    endDate: string;
    campaignIds?: string;
    affiliateId?: string;
    page?: number;
    limit?: number;
    sortBy?: string;
    sortOrder?: string;
}

export interface ApiV1ReportsConversionsGetRequest {
    startDate: string;
    endDate: string;
    campaignIds?: string;
    affiliateId?: string;
    status?: string;
    page?: number;
    limit?: number;
    sortBy?: string;
    sortOrder?: string;
}

export interface ApiV1ReportsPerformanceDailyGetRequest {
    startDate: string;
    endDate: string;
    campaignIds?: string;
    affiliateId?: string;
    page?: number;
    limit?: number;
    sortBy?: string;
    sortOrder?: string;
}

export interface ApiV1ReportsPerformanceSummaryGetRequest {
    startDate: string;
    endDate: string;
    campaignIds?: string;
    affiliateId?: string;
}

export interface ApiV1ReportsPerformanceTimeseriesGetRequest {
    startDate: string;
    endDate: string;
    campaignIds?: string;
    affiliateId?: string;
    granularity?: string;
}

/**
 * 
 */
export class ReportsApi extends runtime.BaseAPI {

    /**
     * Returns paginated click events with geographic and referrer information
     * Get clicks report
     */
    async apiV1ReportsClicksGetRaw(requestParameters: ApiV1ReportsClicksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersClicksReportResponse>> {
        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling apiV1ReportsClicksGet().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling apiV1ReportsClicksGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['campaignIds'] != null) {
            queryParameters['campaignIds'] = requestParameters['campaignIds'];
        }

        if (requestParameters['affiliateId'] != null) {
            queryParameters['affiliateId'] = requestParameters['affiliateId'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/reports/clicks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersClicksReportResponseFromJSON(jsonValue));
    }

    /**
     * Returns paginated click events with geographic and referrer information
     * Get clicks report
     */
    async apiV1ReportsClicksGet(requestParameters: ApiV1ReportsClicksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersClicksReportResponse> {
        const response = await this.apiV1ReportsClicksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns paginated conversion events with detailed tracking information
     * Get conversions report
     */
    async apiV1ReportsConversionsGetRaw(requestParameters: ApiV1ReportsConversionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersConversionsReportResponse>> {
        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling apiV1ReportsConversionsGet().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling apiV1ReportsConversionsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['campaignIds'] != null) {
            queryParameters['campaignIds'] = requestParameters['campaignIds'];
        }

        if (requestParameters['affiliateId'] != null) {
            queryParameters['affiliateId'] = requestParameters['affiliateId'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/reports/conversions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersConversionsReportResponseFromJSON(jsonValue));
    }

    /**
     * Returns paginated conversion events with detailed tracking information
     * Get conversions report
     */
    async apiV1ReportsConversionsGet(requestParameters: ApiV1ReportsConversionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersConversionsReportResponse> {
        const response = await this.apiV1ReportsConversionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns paginated daily performance breakdown with campaign details
     * Get daily performance report
     */
    async apiV1ReportsPerformanceDailyGetRaw(requestParameters: ApiV1ReportsPerformanceDailyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersDailyPerformanceReportResponse>> {
        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling apiV1ReportsPerformanceDailyGet().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling apiV1ReportsPerformanceDailyGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['campaignIds'] != null) {
            queryParameters['campaignIds'] = requestParameters['campaignIds'];
        }

        if (requestParameters['affiliateId'] != null) {
            queryParameters['affiliateId'] = requestParameters['affiliateId'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/reports/performance/daily`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersDailyPerformanceReportResponseFromJSON(jsonValue));
    }

    /**
     * Returns paginated daily performance breakdown with campaign details
     * Get daily performance report
     */
    async apiV1ReportsPerformanceDailyGet(requestParameters: ApiV1ReportsPerformanceDailyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersDailyPerformanceReportResponse> {
        const response = await this.apiV1ReportsPerformanceDailyGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns aggregated performance metrics for the specified date range and filters
     * Get performance summary
     */
    async apiV1ReportsPerformanceSummaryGetRaw(requestParameters: ApiV1ReportsPerformanceSummaryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersPerformanceSummaryResponse>> {
        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling apiV1ReportsPerformanceSummaryGet().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling apiV1ReportsPerformanceSummaryGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['campaignIds'] != null) {
            queryParameters['campaignIds'] = requestParameters['campaignIds'];
        }

        if (requestParameters['affiliateId'] != null) {
            queryParameters['affiliateId'] = requestParameters['affiliateId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/reports/performance/summary`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersPerformanceSummaryResponseFromJSON(jsonValue));
    }

    /**
     * Returns aggregated performance metrics for the specified date range and filters
     * Get performance summary
     */
    async apiV1ReportsPerformanceSummaryGet(requestParameters: ApiV1ReportsPerformanceSummaryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersPerformanceSummaryResponse> {
        const response = await this.apiV1ReportsPerformanceSummaryGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns time series performance data for charts and graphs
     * Get performance time series
     */
    async apiV1ReportsPerformanceTimeseriesGetRaw(requestParameters: ApiV1ReportsPerformanceTimeseriesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlersPerformanceTimeSeriesResponse>> {
        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling apiV1ReportsPerformanceTimeseriesGet().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling apiV1ReportsPerformanceTimeseriesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['campaignIds'] != null) {
            queryParameters['campaignIds'] = requestParameters['campaignIds'];
        }

        if (requestParameters['affiliateId'] != null) {
            queryParameters['affiliateId'] = requestParameters['affiliateId'];
        }

        if (requestParameters['granularity'] != null) {
            queryParameters['granularity'] = requestParameters['granularity'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/reports/performance/timeseries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlersPerformanceTimeSeriesResponseFromJSON(jsonValue));
    }

    /**
     * Returns time series performance data for charts and graphs
     * Get performance time series
     */
    async apiV1ReportsPerformanceTimeseriesGet(requestParameters: ApiV1ReportsPerformanceTimeseriesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlersPerformanceTimeSeriesResponse> {
        const response = await this.apiV1ReportsPerformanceTimeseriesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
