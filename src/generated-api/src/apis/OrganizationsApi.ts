/* tslint:disable */
/* eslint-disable */
/**
 * Affiliate Backend API
 * API Server for Affiliate Backend Application
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DomainOrganization,
  HandlersCreateOrganizationRequest,
  HandlersUpdateOrganizationRequest,
} from '../models/index';
import {
    DomainOrganizationFromJSON,
    DomainOrganizationToJSON,
    HandlersCreateOrganizationRequestFromJSON,
    HandlersCreateOrganizationRequestToJSON,
    HandlersUpdateOrganizationRequestFromJSON,
    HandlersUpdateOrganizationRequestToJSON,
} from '../models/index';

export interface ApiV1OrganizationsPostRequest {
    request: HandlersCreateOrganizationRequest;
}

export interface ApiV1PublicOrganizationsPostRequest {
    request: HandlersCreateOrganizationRequest;
}

export interface OrganizationsGetRequest {
    page?: number;
    pageSize?: number;
}

export interface OrganizationsIdDeleteRequest {
    id: number;
}

export interface OrganizationsIdGetRequest {
    id: number;
}

export interface OrganizationsIdPutRequest {
    id: number;
    request: HandlersUpdateOrganizationRequest;
}

/**
 * 
 */
export class OrganizationsApi extends runtime.BaseAPI {

    /**
     * Creates a new organization with the given name. Requires Admin role.
     * Create a new organization (Admin only)
     */
    async apiV1OrganizationsPostRaw(requestParameters: ApiV1OrganizationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainOrganization>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling apiV1OrganizationsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/organizations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HandlersCreateOrganizationRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainOrganizationFromJSON(jsonValue));
    }

    /**
     * Creates a new organization with the given name. Requires Admin role.
     * Create a new organization (Admin only)
     */
    async apiV1OrganizationsPost(requestParameters: ApiV1OrganizationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainOrganization> {
        const response = await this.apiV1OrganizationsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new organization with the given name and optional extra info. No authentication required.
     * Create a new organization (Public)
     */
    async apiV1PublicOrganizationsPostRaw(requestParameters: ApiV1PublicOrganizationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainOrganization>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling apiV1PublicOrganizationsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/organizations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HandlersCreateOrganizationRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainOrganizationFromJSON(jsonValue));
    }

    /**
     * Creates a new organization with the given name and optional extra info. No authentication required.
     * Create a new organization (Public)
     */
    async apiV1PublicOrganizationsPost(requestParameters: ApiV1PublicOrganizationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainOrganization> {
        const response = await this.apiV1PublicOrganizationsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of organizations with pagination
     * List organizations
     */
    async organizationsGetRaw(requestParameters: OrganizationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DomainOrganization>>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/organizations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DomainOrganizationFromJSON));
    }

    /**
     * Retrieves a list of organizations with pagination
     * List organizations
     */
    async organizationsGet(requestParameters: OrganizationsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DomainOrganization>> {
        const response = await this.organizationsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an organization by its ID
     * Delete organization
     */
    async organizationsIdDeleteRaw(requestParameters: OrganizationsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling organizationsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/organizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an organization by its ID
     * Delete organization
     */
    async organizationsIdDelete(requestParameters: OrganizationsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.organizationsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves an organization by its ID
     * Get organization by ID
     */
    async organizationsIdGetRaw(requestParameters: OrganizationsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainOrganization>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling organizationsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/organizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainOrganizationFromJSON(jsonValue));
    }

    /**
     * Retrieves an organization by its ID
     * Get organization by ID
     */
    async organizationsIdGet(requestParameters: OrganizationsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainOrganization> {
        const response = await this.organizationsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an organization with the given details
     * Update organization
     */
    async organizationsIdPutRaw(requestParameters: OrganizationsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainOrganization>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling organizationsIdPut().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling organizationsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/organizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HandlersUpdateOrganizationRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainOrganizationFromJSON(jsonValue));
    }

    /**
     * Updates an organization with the given details
     * Update organization
     */
    async organizationsIdPut(requestParameters: OrganizationsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainOrganization> {
        const response = await this.organizationsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
