/* tslint:disable */
/* eslint-disable */
/**
 * Affiliate Backend API
 * API Server for Affiliate Backend Application
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DomainAffiliate,
  DomainCampaign,
  DomainCreateAssociationRequest,
  DomainOrganizationAssociation,
  DomainUpdateAssociationRequest,
  HandlersErrorResponse,
} from '../models/index';
import {
    DomainAffiliateFromJSON,
    DomainAffiliateToJSON,
    DomainCampaignFromJSON,
    DomainCampaignToJSON,
    DomainCreateAssociationRequestFromJSON,
    DomainCreateAssociationRequestToJSON,
    DomainOrganizationAssociationFromJSON,
    DomainOrganizationAssociationToJSON,
    DomainUpdateAssociationRequestFromJSON,
    DomainUpdateAssociationRequestToJSON,
    HandlersErrorResponseFromJSON,
    HandlersErrorResponseToJSON,
} from '../models/index';

export interface ApiV1OrganizationAssociationsGetRequest {
    advertiserOrgId?: number;
    affiliateOrgId?: number;
    status?: ApiV1OrganizationAssociationsGetStatusEnum;
    associationType?: ApiV1OrganizationAssociationsGetAssociationTypeEnum;
    limit?: number;
    offset?: number;
    withDetails?: boolean;
}

export interface ApiV1OrganizationAssociationsIdApprovePostRequest {
    id: number;
}

export interface ApiV1OrganizationAssociationsIdGetRequest {
    id: number;
}

export interface ApiV1OrganizationAssociationsIdReactivatePostRequest {
    id: number;
}

export interface ApiV1OrganizationAssociationsIdRejectPostRequest {
    id: number;
}

export interface ApiV1OrganizationAssociationsIdSuspendPostRequest {
    id: number;
}

export interface ApiV1OrganizationAssociationsIdVisibilityPutRequest {
    id: number;
    request: DomainUpdateAssociationRequest;
}

export interface ApiV1OrganizationAssociationsInvitationsPostRequest {
    request: DomainCreateAssociationRequest;
}

export interface ApiV1OrganizationAssociationsRequestsPostRequest {
    request: DomainCreateAssociationRequest;
}

export interface ApiV1OrganizationsAdvertiserOrgIdVisibleAffiliatesGetRequest {
    advertiserOrgId: number;
    affiliateOrgId?: number;
}

export interface ApiV1OrganizationsAffiliateOrgIdVisibleCampaignsGetRequest {
    affiliateOrgId: number;
    advertiserOrgId?: number;
}

export interface ApiV1OrganizationsIdAssociationsGetRequest {
    id: number;
    status?: ApiV1OrganizationsIdAssociationsGetStatusEnum;
    withDetails?: boolean;
}

/**
 * 
 */
export class OrganizationAssociationsApi extends runtime.BaseAPI {

    /**
     * List organization associations with optional filtering
     * List associations
     */
    async apiV1OrganizationAssociationsGetRaw(requestParameters: ApiV1OrganizationAssociationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DomainOrganizationAssociation>>> {
        const queryParameters: any = {};

        if (requestParameters['advertiserOrgId'] != null) {
            queryParameters['advertiser_org_id'] = requestParameters['advertiserOrgId'];
        }

        if (requestParameters['affiliateOrgId'] != null) {
            queryParameters['affiliate_org_id'] = requestParameters['affiliateOrgId'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['associationType'] != null) {
            queryParameters['association_type'] = requestParameters['associationType'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['withDetails'] != null) {
            queryParameters['with_details'] = requestParameters['withDetails'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organization-associations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DomainOrganizationAssociationFromJSON));
    }

    /**
     * List organization associations with optional filtering
     * List associations
     */
    async apiV1OrganizationAssociationsGet(requestParameters: ApiV1OrganizationAssociationsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DomainOrganizationAssociation>> {
        const response = await this.apiV1OrganizationAssociationsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Approve a pending organization association
     * Approve association
     */
    async apiV1OrganizationAssociationsIdApprovePostRaw(requestParameters: ApiV1OrganizationAssociationsIdApprovePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainOrganizationAssociation>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1OrganizationAssociationsIdApprovePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organization-associations/{id}/approve`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainOrganizationAssociationFromJSON(jsonValue));
    }

    /**
     * Approve a pending organization association
     * Approve association
     */
    async apiV1OrganizationAssociationsIdApprovePost(requestParameters: ApiV1OrganizationAssociationsIdApprovePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainOrganizationAssociation> {
        const response = await this.apiV1OrganizationAssociationsIdApprovePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an organization association by ID
     * Get association
     */
    async apiV1OrganizationAssociationsIdGetRaw(requestParameters: ApiV1OrganizationAssociationsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainOrganizationAssociation>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1OrganizationAssociationsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organization-associations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainOrganizationAssociationFromJSON(jsonValue));
    }

    /**
     * Get an organization association by ID
     * Get association
     */
    async apiV1OrganizationAssociationsIdGet(requestParameters: ApiV1OrganizationAssociationsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainOrganizationAssociation> {
        const response = await this.apiV1OrganizationAssociationsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reactivate a suspended organization association
     * Reactivate association
     */
    async apiV1OrganizationAssociationsIdReactivatePostRaw(requestParameters: ApiV1OrganizationAssociationsIdReactivatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainOrganizationAssociation>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1OrganizationAssociationsIdReactivatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organization-associations/{id}/reactivate`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainOrganizationAssociationFromJSON(jsonValue));
    }

    /**
     * Reactivate a suspended organization association
     * Reactivate association
     */
    async apiV1OrganizationAssociationsIdReactivatePost(requestParameters: ApiV1OrganizationAssociationsIdReactivatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainOrganizationAssociation> {
        const response = await this.apiV1OrganizationAssociationsIdReactivatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reject a pending organization association
     * Reject association
     */
    async apiV1OrganizationAssociationsIdRejectPostRaw(requestParameters: ApiV1OrganizationAssociationsIdRejectPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainOrganizationAssociation>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1OrganizationAssociationsIdRejectPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organization-associations/{id}/reject`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainOrganizationAssociationFromJSON(jsonValue));
    }

    /**
     * Reject a pending organization association
     * Reject association
     */
    async apiV1OrganizationAssociationsIdRejectPost(requestParameters: ApiV1OrganizationAssociationsIdRejectPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainOrganizationAssociation> {
        const response = await this.apiV1OrganizationAssociationsIdRejectPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Suspend an active organization association
     * Suspend association
     */
    async apiV1OrganizationAssociationsIdSuspendPostRaw(requestParameters: ApiV1OrganizationAssociationsIdSuspendPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainOrganizationAssociation>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1OrganizationAssociationsIdSuspendPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organization-associations/{id}/suspend`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainOrganizationAssociationFromJSON(jsonValue));
    }

    /**
     * Suspend an active organization association
     * Suspend association
     */
    async apiV1OrganizationAssociationsIdSuspendPost(requestParameters: ApiV1OrganizationAssociationsIdSuspendPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainOrganizationAssociation> {
        const response = await this.apiV1OrganizationAssociationsIdSuspendPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the visibility settings of an organization association
     * Update visibility
     */
    async apiV1OrganizationAssociationsIdVisibilityPutRaw(requestParameters: ApiV1OrganizationAssociationsIdVisibilityPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainOrganizationAssociation>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1OrganizationAssociationsIdVisibilityPut().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling apiV1OrganizationAssociationsIdVisibilityPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organization-associations/{id}/visibility`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DomainUpdateAssociationRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainOrganizationAssociationFromJSON(jsonValue));
    }

    /**
     * Update the visibility settings of an organization association
     * Update visibility
     */
    async apiV1OrganizationAssociationsIdVisibilityPut(requestParameters: ApiV1OrganizationAssociationsIdVisibilityPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainOrganizationAssociation> {
        const response = await this.apiV1OrganizationAssociationsIdVisibilityPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new invitation from advertiser organization to affiliate organization
     * Create invitation
     */
    async apiV1OrganizationAssociationsInvitationsPostRaw(requestParameters: ApiV1OrganizationAssociationsInvitationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainOrganizationAssociation>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling apiV1OrganizationAssociationsInvitationsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organization-associations/invitations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DomainCreateAssociationRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainOrganizationAssociationFromJSON(jsonValue));
    }

    /**
     * Create a new invitation from advertiser organization to affiliate organization
     * Create invitation
     */
    async apiV1OrganizationAssociationsInvitationsPost(requestParameters: ApiV1OrganizationAssociationsInvitationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainOrganizationAssociation> {
        const response = await this.apiV1OrganizationAssociationsInvitationsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new request from affiliate organization to advertiser organization
     * Create request
     */
    async apiV1OrganizationAssociationsRequestsPostRaw(requestParameters: ApiV1OrganizationAssociationsRequestsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainOrganizationAssociation>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling apiV1OrganizationAssociationsRequestsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/organization-associations/requests`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DomainCreateAssociationRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainOrganizationAssociationFromJSON(jsonValue));
    }

    /**
     * Create a new request from affiliate organization to advertiser organization
     * Create request
     */
    async apiV1OrganizationAssociationsRequestsPost(requestParameters: ApiV1OrganizationAssociationsRequestsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainOrganizationAssociation> {
        const response = await this.apiV1OrganizationAssociationsRequestsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all affiliates from affiliate organizations that are visible to the specified advertiser organization based on active associations
     * Get visible affiliates for advertiser
     */
    async apiV1OrganizationsAdvertiserOrgIdVisibleAffiliatesGetRaw(requestParameters: ApiV1OrganizationsAdvertiserOrgIdVisibleAffiliatesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DomainAffiliate>>> {
        if (requestParameters['advertiserOrgId'] == null) {
            throw new runtime.RequiredError(
                'advertiserOrgId',
                'Required parameter "advertiserOrgId" was null or undefined when calling apiV1OrganizationsAdvertiserOrgIdVisibleAffiliatesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['affiliateOrgId'] != null) {
            queryParameters['affiliate_org_id'] = requestParameters['affiliateOrgId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{advertiser_org_id}/visible-affiliates`.replace(`{${"advertiser_org_id"}}`, encodeURIComponent(String(requestParameters['advertiserOrgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DomainAffiliateFromJSON));
    }

    /**
     * Get all affiliates from affiliate organizations that are visible to the specified advertiser organization based on active associations
     * Get visible affiliates for advertiser
     */
    async apiV1OrganizationsAdvertiserOrgIdVisibleAffiliatesGet(requestParameters: ApiV1OrganizationsAdvertiserOrgIdVisibleAffiliatesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DomainAffiliate>> {
        const response = await this.apiV1OrganizationsAdvertiserOrgIdVisibleAffiliatesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all campaigns from advertiser organizations that are visible to the specified affiliate organization based on active associations
     * Get visible campaigns for affiliate
     */
    async apiV1OrganizationsAffiliateOrgIdVisibleCampaignsGetRaw(requestParameters: ApiV1OrganizationsAffiliateOrgIdVisibleCampaignsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DomainCampaign>>> {
        if (requestParameters['affiliateOrgId'] == null) {
            throw new runtime.RequiredError(
                'affiliateOrgId',
                'Required parameter "affiliateOrgId" was null or undefined when calling apiV1OrganizationsAffiliateOrgIdVisibleCampaignsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['advertiserOrgId'] != null) {
            queryParameters['advertiser_org_id'] = requestParameters['advertiserOrgId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{affiliate_org_id}/visible-campaigns`.replace(`{${"affiliate_org_id"}}`, encodeURIComponent(String(requestParameters['affiliateOrgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DomainCampaignFromJSON));
    }

    /**
     * Get all campaigns from advertiser organizations that are visible to the specified affiliate organization based on active associations
     * Get visible campaigns for affiliate
     */
    async apiV1OrganizationsAffiliateOrgIdVisibleCampaignsGet(requestParameters: ApiV1OrganizationsAffiliateOrgIdVisibleCampaignsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DomainCampaign>> {
        const response = await this.apiV1OrganizationsAffiliateOrgIdVisibleCampaignsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all associations for a specific organization (advertiser or affiliate)
     * Get associations for organization
     */
    async apiV1OrganizationsIdAssociationsGetRaw(requestParameters: ApiV1OrganizationsIdAssociationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DomainOrganizationAssociation>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1OrganizationsIdAssociationsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['withDetails'] != null) {
            queryParameters['with_details'] = requestParameters['withDetails'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/organizations/{id}/associations`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DomainOrganizationAssociationFromJSON));
    }

    /**
     * Get all associations for a specific organization (advertiser or affiliate)
     * Get associations for organization
     */
    async apiV1OrganizationsIdAssociationsGet(requestParameters: ApiV1OrganizationsIdAssociationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DomainOrganizationAssociation>> {
        const response = await this.apiV1OrganizationsIdAssociationsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ApiV1OrganizationAssociationsGetStatusEnum = {
    Pending: 'pending',
    Active: 'active',
    Suspended: 'suspended',
    Rejected: 'rejected'
} as const;
export type ApiV1OrganizationAssociationsGetStatusEnum = typeof ApiV1OrganizationAssociationsGetStatusEnum[keyof typeof ApiV1OrganizationAssociationsGetStatusEnum];
/**
 * @export
 */
export const ApiV1OrganizationAssociationsGetAssociationTypeEnum = {
    Invitation: 'invitation',
    Request: 'request'
} as const;
export type ApiV1OrganizationAssociationsGetAssociationTypeEnum = typeof ApiV1OrganizationAssociationsGetAssociationTypeEnum[keyof typeof ApiV1OrganizationAssociationsGetAssociationTypeEnum];
/**
 * @export
 */
export const ApiV1OrganizationsIdAssociationsGetStatusEnum = {
    Pending: 'pending',
    Active: 'active',
    Suspended: 'suspended',
    Rejected: 'rejected'
} as const;
export type ApiV1OrganizationsIdAssociationsGetStatusEnum = typeof ApiV1OrganizationsIdAssociationsGetStatusEnum[keyof typeof ApiV1OrganizationsIdAssociationsGetStatusEnum];
