/* tslint:disable */
/* eslint-disable */
/**
 * Affiliate Backend API
 * API Server for Affiliate Backend Application
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DomainActivityResponse,
  DomainCampaignDetail,
  DomainDashboardData,
  DomainSystemHealth,
  HandlersErrorResponse,
  HandlersTrackActivityRequest,
} from '../models/index';
import {
    DomainActivityResponseFromJSON,
    DomainActivityResponseToJSON,
    DomainCampaignDetailFromJSON,
    DomainCampaignDetailToJSON,
    DomainDashboardDataFromJSON,
    DomainDashboardDataToJSON,
    DomainSystemHealthFromJSON,
    DomainSystemHealthToJSON,
    HandlersErrorResponseFromJSON,
    HandlersErrorResponseToJSON,
    HandlersTrackActivityRequestFromJSON,
    HandlersTrackActivityRequestToJSON,
} from '../models/index';

export interface DashboardActivityGetRequest {
    limit?: number;
    offset?: number;
    type?: Array<string>;
    since?: string;
}

export interface DashboardActivityPostRequest {
    request: HandlersTrackActivityRequest;
}

export interface DashboardCampaignsCampaignIdGetRequest {
    campaignId: number;
}

export interface DashboardGetRequest {
    period?: string;
    startDate?: string;
    endDate?: string;
    timezone?: string;
}

/**
 * 
 */
export class DashboardApi extends runtime.BaseAPI {

    /**
     * Returns paginated recent activity feed
     * Get recent activity
     */
    async dashboardActivityGetRaw(requestParameters: DashboardActivityGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainActivityResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dashboard/activity`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainActivityResponseFromJSON(jsonValue));
    }

    /**
     * Returns paginated recent activity feed
     * Get recent activity
     */
    async dashboardActivityGet(requestParameters: DashboardActivityGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainActivityResponse> {
        const response = await this.dashboardActivityGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new activity record for the user\'s organization
     * Track dashboard activity
     */
    async dashboardActivityPostRaw(requestParameters: DashboardActivityPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string | undefined; }>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling dashboardActivityPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/dashboard/activity`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HandlersTrackActivityRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Creates a new activity record for the user\'s organization
     * Track dashboard activity
     */
    async dashboardActivityPost(requestParameters: DashboardActivityPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string | undefined; }> {
        const response = await this.dashboardActivityPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Invalidates dashboard cache for the user\'s organization
     * Invalidate dashboard cache
     */
    async dashboardCacheInvalidatePostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string | undefined; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dashboard/cache/invalidate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Invalidates dashboard cache for the user\'s organization
     * Invalidate dashboard cache
     */
    async dashboardCacheInvalidatePost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string | undefined; }> {
        const response = await this.dashboardCacheInvalidatePostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns detailed performance data for a specific campaign
     * Get campaign detail
     */
    async dashboardCampaignsCampaignIdGetRaw(requestParameters: DashboardCampaignsCampaignIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainCampaignDetail>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling dashboardCampaignsCampaignIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dashboard/campaigns/{campaignId}`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainCampaignDetailFromJSON(jsonValue));
    }

    /**
     * Returns detailed performance data for a specific campaign
     * Get campaign detail
     */
    async dashboardCampaignsCampaignIdGet(requestParameters: DashboardCampaignsCampaignIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainCampaignDetail> {
        const response = await this.dashboardCampaignsCampaignIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns dashboard data based on user\'s organization type
     * Get dashboard data
     */
    async dashboardGetRaw(requestParameters: DashboardGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainDashboardData>> {
        const queryParameters: any = {};

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = requestParameters['endDate'];
        }

        if (requestParameters['timezone'] != null) {
            queryParameters['timezone'] = requestParameters['timezone'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/dashboard`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainDashboardDataFromJSON(jsonValue));
    }

    /**
     * Returns dashboard data based on user\'s organization type
     * Get dashboard data
     */
    async dashboardGet(requestParameters: DashboardGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainDashboardData> {
        const response = await this.dashboardGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the health status of the dashboard service
     * Dashboard health check
     */
    async dashboardHealthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any | undefined; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dashboard/health`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns the health status of the dashboard service
     * Dashboard health check
     */
    async dashboardHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any | undefined; }> {
        const response = await this.dashboardHealthGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns system health metrics (Platform Owner only)
     * Get system health metrics
     */
    async dashboardSystemHealthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainSystemHealth>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dashboard/system/health`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainSystemHealthFromJSON(jsonValue));
    }

    /**
     * Returns system health metrics (Platform Owner only)
     * Get system health metrics
     */
    async dashboardSystemHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainSystemHealth> {
        const response = await this.dashboardSystemHealthGetRaw(initOverrides);
        return await response.value();
    }

}
