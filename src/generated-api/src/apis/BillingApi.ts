/* tslint:disable */
/* eslint-disable */
/**
 * Affiliate Backend API
 * API Server for Affiliate Backend Application
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DomainBillingAccount,
  DomainBillingDashboardResponse,
  DomainCreatePaymentMethodRequest,
  DomainRechargeRequest,
  DomainStripePaymentMethod,
  DomainTransaction,
  DomainUpdateBillingConfigRequest,
  HandlersErrorResponse,
} from '../models/index';
import {
    DomainBillingAccountFromJSON,
    DomainBillingAccountToJSON,
    DomainBillingDashboardResponseFromJSON,
    DomainBillingDashboardResponseToJSON,
    DomainCreatePaymentMethodRequestFromJSON,
    DomainCreatePaymentMethodRequestToJSON,
    DomainRechargeRequestFromJSON,
    DomainRechargeRequestToJSON,
    DomainStripePaymentMethodFromJSON,
    DomainStripePaymentMethodToJSON,
    DomainTransactionFromJSON,
    DomainTransactionToJSON,
    DomainUpdateBillingConfigRequestFromJSON,
    DomainUpdateBillingConfigRequestToJSON,
    HandlersErrorResponseFromJSON,
    HandlersErrorResponseToJSON,
} from '../models/index';

export interface BillingConfigPutRequest {
    request: DomainUpdateBillingConfigRequest;
}

export interface BillingPaymentMethodsIdDeleteRequest {
    id: number;
}

export interface BillingPaymentMethodsPostRequest {
    request: DomainCreatePaymentMethodRequest;
}

export interface BillingRechargePostRequest {
    request: DomainRechargeRequest;
}

export interface BillingTransactionsGetRequest {
    limit?: number;
    offset?: number;
}

/**
 * 
 */
export class BillingApi extends runtime.BaseAPI {

    /**
     * Update billing configuration for the organization
     * Update billing configuration
     */
    async billingConfigPutRaw(requestParameters: BillingConfigPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainBillingAccount>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling billingConfigPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/billing/config`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DomainUpdateBillingConfigRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainBillingAccountFromJSON(jsonValue));
    }

    /**
     * Update billing configuration for the organization
     * Update billing configuration
     */
    async billingConfigPut(requestParameters: BillingConfigPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainBillingAccount> {
        const response = await this.billingConfigPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get billing dashboard data for the authenticated user\'s organization
     * Get billing dashboard
     */
    async billingDashboardGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainBillingDashboardResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/billing/dashboard`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainBillingDashboardResponseFromJSON(jsonValue));
    }

    /**
     * Get billing dashboard data for the authenticated user\'s organization
     * Get billing dashboard
     */
    async billingDashboardGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainBillingDashboardResponse> {
        const response = await this.billingDashboardGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Remove a payment method from the organization
     * Remove payment method
     */
    async billingPaymentMethodsIdDeleteRaw(requestParameters: BillingPaymentMethodsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling billingPaymentMethodsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/billing/payment-methods/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a payment method from the organization
     * Remove payment method
     */
    async billingPaymentMethodsIdDelete(requestParameters: BillingPaymentMethodsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.billingPaymentMethodsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Add a new payment method for the organization
     * Add payment method
     */
    async billingPaymentMethodsPostRaw(requestParameters: BillingPaymentMethodsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainStripePaymentMethod>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling billingPaymentMethodsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/billing/payment-methods`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DomainCreatePaymentMethodRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainStripePaymentMethodFromJSON(jsonValue));
    }

    /**
     * Add a new payment method for the organization
     * Add payment method
     */
    async billingPaymentMethodsPost(requestParameters: BillingPaymentMethodsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainStripePaymentMethod> {
        const response = await this.billingPaymentMethodsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add funds to the organization\'s account
     * Recharge account
     */
    async billingRechargePostRaw(requestParameters: BillingRechargePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainTransaction>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling billingRechargePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/billing/recharge`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DomainRechargeRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainTransactionFromJSON(jsonValue));
    }

    /**
     * Add funds to the organization\'s account
     * Recharge account
     */
    async billingRechargePost(requestParameters: BillingRechargePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainTransaction> {
        const response = await this.billingRechargePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get transaction history for the organization
     * Get transaction history
     */
    async billingTransactionsGetRaw(requestParameters: BillingTransactionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DomainTransaction>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/billing/transactions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DomainTransactionFromJSON));
    }

    /**
     * Get transaction history for the organization
     * Get transaction history
     */
    async billingTransactionsGet(requestParameters: BillingTransactionsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DomainTransaction>> {
        const response = await this.billingTransactionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
