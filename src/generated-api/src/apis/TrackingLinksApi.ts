/* tslint:disable */
/* eslint-disable */
/**
 * Affiliate Backend API
 * API Server for Affiliate Backend Application
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HandlersErrorResponse,
  ModelsTrackingLinkGenerationRequest,
  ModelsTrackingLinkGenerationResponse,
  ModelsTrackingLinkListResponse,
  ModelsTrackingLinkResponse,
  ModelsTrackingLinkUpdateRequest,
} from '../models/index';
import {
    HandlersErrorResponseFromJSON,
    HandlersErrorResponseToJSON,
    ModelsTrackingLinkGenerationRequestFromJSON,
    ModelsTrackingLinkGenerationRequestToJSON,
    ModelsTrackingLinkGenerationResponseFromJSON,
    ModelsTrackingLinkGenerationResponseToJSON,
    ModelsTrackingLinkListResponseFromJSON,
    ModelsTrackingLinkListResponseToJSON,
    ModelsTrackingLinkResponseFromJSON,
    ModelsTrackingLinkResponseToJSON,
    ModelsTrackingLinkUpdateRequestFromJSON,
    ModelsTrackingLinkUpdateRequestToJSON,
} from '../models/index';

export interface OrganizationsOrganizationIdTrackingLinksLinkIdQrGetRequest {
    organizationId: number;
    linkId: number;
}

export interface TrackingLinksGetRequest {
    affiliateIds?: string;
    campaignIds?: string;
    limit?: number;
    offset?: number;
}

export interface TrackingLinksIdDeleteRequest {
    id: number;
}

export interface TrackingLinksIdGetRequest {
    id: number;
}

export interface TrackingLinksIdPutRequest {
    id: number;
    request: ModelsTrackingLinkUpdateRequest;
}

export interface TrackingLinksPostRequest {
    request: ModelsTrackingLinkGenerationRequest;
}

/**
 * 
 */
export class TrackingLinksApi extends runtime.BaseAPI {

    /**
     * Generate a QR code for the specified tracking link
     * Get QR code for tracking link
     */
    async organizationsOrganizationIdTrackingLinksLinkIdQrGetRaw(requestParameters: OrganizationsOrganizationIdTrackingLinksLinkIdQrGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling organizationsOrganizationIdTrackingLinksLinkIdQrGet().'
            );
        }

        if (requestParameters['linkId'] == null) {
            throw new runtime.RequiredError(
                'linkId',
                'Required parameter "linkId" was null or undefined when calling organizationsOrganizationIdTrackingLinksLinkIdQrGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/organizations/{organization_id}/tracking-links/{link_id}/qr`.replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"link_id"}}`, encodeURIComponent(String(requestParameters['linkId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Generate a QR code for the specified tracking link
     * Get QR code for tracking link
     */
    async organizationsOrganizationIdTrackingLinksLinkIdQrGet(requestParameters: OrganizationsOrganizationIdTrackingLinksLinkIdQrGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.organizationsOrganizationIdTrackingLinksLinkIdQrGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List tracking links with optional filtering by affiliate IDs and campaign IDs
     * List tracking links
     */
    async trackingLinksGetRaw(requestParameters: TrackingLinksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsTrackingLinkListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['affiliateIds'] != null) {
            queryParameters['affiliate_ids'] = requestParameters['affiliateIds'];
        }

        if (requestParameters['campaignIds'] != null) {
            queryParameters['campaign_ids'] = requestParameters['campaignIds'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tracking-links`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsTrackingLinkListResponseFromJSON(jsonValue));
    }

    /**
     * List tracking links with optional filtering by affiliate IDs and campaign IDs
     * List tracking links
     */
    async trackingLinksGet(requestParameters: TrackingLinksGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsTrackingLinkListResponse> {
        const response = await this.trackingLinksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a tracking link by its ID
     * Delete tracking link
     */
    async trackingLinksIdDeleteRaw(requestParameters: TrackingLinksIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling trackingLinksIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tracking-links/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a tracking link by its ID
     * Delete tracking link
     */
    async trackingLinksIdDelete(requestParameters: TrackingLinksIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.trackingLinksIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a tracking link by its ID
     * Get tracking link by ID
     */
    async trackingLinksIdGetRaw(requestParameters: TrackingLinksIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsTrackingLinkResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling trackingLinksIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tracking-links/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsTrackingLinkResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a tracking link by its ID
     * Get tracking link by ID
     */
    async trackingLinksIdGet(requestParameters: TrackingLinksIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsTrackingLinkResponse> {
        const response = await this.trackingLinksIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a tracking link and regenerate if key parameters change
     * Update tracking link
     */
    async trackingLinksIdPutRaw(requestParameters: TrackingLinksIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsTrackingLinkResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling trackingLinksIdPut().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling trackingLinksIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tracking-links/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModelsTrackingLinkUpdateRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsTrackingLinkResponseFromJSON(jsonValue));
    }

    /**
     * Update a tracking link and regenerate if key parameters change
     * Update tracking link
     */
    async trackingLinksIdPut(requestParameters: TrackingLinksIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsTrackingLinkResponse> {
        const response = await this.trackingLinksIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new tracking link with uniqueness guarantee for campaign_id + affiliate_id combination
     * Create a new tracking link
     */
    async trackingLinksPostRaw(requestParameters: TrackingLinksPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsTrackingLinkGenerationResponse>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling trackingLinksPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/tracking-links`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelsTrackingLinkGenerationRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsTrackingLinkGenerationResponseFromJSON(jsonValue));
    }

    /**
     * Create a new tracking link with uniqueness guarantee for campaign_id + affiliate_id combination
     * Create a new tracking link
     */
    async trackingLinksPost(requestParameters: TrackingLinksPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsTrackingLinkGenerationResponse> {
        const response = await this.trackingLinksPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
