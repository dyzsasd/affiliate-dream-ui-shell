/* tslint:disable */
/* eslint-disable */
/**
 * Affiliate Backend API
 * API Server for Affiliate Backend Application
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HandlersErrorResponse,
  ModelsTrackingLinkGenerationRequest,
  ModelsTrackingLinkGenerationResponse,
  ModelsTrackingLinkListResponse,
  ModelsTrackingLinkRequest,
  ModelsTrackingLinkResponse,
  ModelsTrackingLinkUpdateRequest,
  ModelsTrackingLinkUpsertRequest,
  ModelsTrackingLinkUpsertResponse,
} from '../models/index';
import {
    HandlersErrorResponseFromJSON,
    HandlersErrorResponseToJSON,
    ModelsTrackingLinkGenerationRequestFromJSON,
    ModelsTrackingLinkGenerationRequestToJSON,
    ModelsTrackingLinkGenerationResponseFromJSON,
    ModelsTrackingLinkGenerationResponseToJSON,
    ModelsTrackingLinkListResponseFromJSON,
    ModelsTrackingLinkListResponseToJSON,
    ModelsTrackingLinkRequestFromJSON,
    ModelsTrackingLinkRequestToJSON,
    ModelsTrackingLinkResponseFromJSON,
    ModelsTrackingLinkResponseToJSON,
    ModelsTrackingLinkUpdateRequestFromJSON,
    ModelsTrackingLinkUpdateRequestToJSON,
    ModelsTrackingLinkUpsertRequestFromJSON,
    ModelsTrackingLinkUpsertRequestToJSON,
    ModelsTrackingLinkUpsertResponseFromJSON,
    ModelsTrackingLinkUpsertResponseToJSON,
} from '../models/index';

export interface AffiliatesIdTrackingLinksGetRequest {
    id: number;
    page?: number;
    pageSize?: number;
}

export interface CampaignsIdTrackingLinksGetRequest {
    id: number;
    page?: number;
    pageSize?: number;
}

export interface OrganizationsOrganizationIdTrackingLinksGeneratePostRequest {
    organizationId: number;
    request: ModelsTrackingLinkGenerationRequest;
}

export interface OrganizationsOrganizationIdTrackingLinksGetRequest {
    organizationId: number;
    page?: number;
    pageSize?: number;
}

export interface OrganizationsOrganizationIdTrackingLinksPostRequest {
    organizationId: number;
    request: ModelsTrackingLinkRequest;
}

export interface OrganizationsOrganizationIdTrackingLinksTrackingLinkIdDeleteRequest {
    organizationId: number;
    trackingLinkId: number;
}

export interface OrganizationsOrganizationIdTrackingLinksTrackingLinkIdGetRequest {
    organizationId: number;
    trackingLinkId: number;
}

export interface OrganizationsOrganizationIdTrackingLinksTrackingLinkIdPutRequest {
    organizationId: number;
    trackingLinkId: number;
    request: ModelsTrackingLinkUpdateRequest;
}

export interface OrganizationsOrganizationIdTrackingLinksTrackingLinkIdQrGetRequest {
    organizationId: number;
    trackingLinkId: number;
}

export interface OrganizationsOrganizationIdTrackingLinksTrackingLinkIdRegeneratePostRequest {
    organizationId: number;
    trackingLinkId: number;
}

export interface OrganizationsOrganizationIdTrackingLinksUpsertPostRequest {
    organizationId: number;
    request: ModelsTrackingLinkUpsertRequest;
}

/**
 * 
 */
export class TrackingLinksApi extends runtime.BaseAPI {

    /**
     * Retrieve a list of tracking links for a specific affiliate
     * List tracking links by affiliate
     */
    async affiliatesIdTrackingLinksGetRaw(requestParameters: AffiliatesIdTrackingLinksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsTrackingLinkListResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling affiliatesIdTrackingLinksGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/affiliates/{id}/tracking-links`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsTrackingLinkListResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of tracking links for a specific affiliate
     * List tracking links by affiliate
     */
    async affiliatesIdTrackingLinksGet(requestParameters: AffiliatesIdTrackingLinksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsTrackingLinkListResponse> {
        const response = await this.affiliatesIdTrackingLinksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of tracking links for a specific campaign
     * List tracking links by campaign
     */
    async campaignsIdTrackingLinksGetRaw(requestParameters: CampaignsIdTrackingLinksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsTrackingLinkListResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling campaignsIdTrackingLinksGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/campaigns/{id}/tracking-links`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsTrackingLinkListResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of tracking links for a specific campaign
     * List tracking links by campaign
     */
    async campaignsIdTrackingLinksGet(requestParameters: CampaignsIdTrackingLinksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsTrackingLinkListResponse> {
        const response = await this.campaignsIdTrackingLinksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate a new tracking link with provider integration for a campaign and affiliate
     * Generate a new tracking link
     */
    async organizationsOrganizationIdTrackingLinksGeneratePostRaw(requestParameters: OrganizationsOrganizationIdTrackingLinksGeneratePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsTrackingLinkGenerationResponse>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling organizationsOrganizationIdTrackingLinksGeneratePost().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling organizationsOrganizationIdTrackingLinksGeneratePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/organizations/{organization_id}/tracking-links/generate`.replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters['organizationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelsTrackingLinkGenerationRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsTrackingLinkGenerationResponseFromJSON(jsonValue));
    }

    /**
     * Generate a new tracking link with provider integration for a campaign and affiliate
     * Generate a new tracking link
     */
    async organizationsOrganizationIdTrackingLinksGeneratePost(requestParameters: OrganizationsOrganizationIdTrackingLinksGeneratePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsTrackingLinkGenerationResponse> {
        const response = await this.organizationsOrganizationIdTrackingLinksGeneratePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of tracking links for a specific organization
     * List tracking links by organization
     */
    async organizationsOrganizationIdTrackingLinksGetRaw(requestParameters: OrganizationsOrganizationIdTrackingLinksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsTrackingLinkListResponse>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling organizationsOrganizationIdTrackingLinksGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/organizations/{organization_id}/tracking-links`.replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters['organizationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsTrackingLinkListResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of tracking links for a specific organization
     * List tracking links by organization
     */
    async organizationsOrganizationIdTrackingLinksGet(requestParameters: OrganizationsOrganizationIdTrackingLinksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsTrackingLinkListResponse> {
        const response = await this.organizationsOrganizationIdTrackingLinksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new tracking link for a campaign and affiliate
     * Create a new tracking link
     */
    async organizationsOrganizationIdTrackingLinksPostRaw(requestParameters: OrganizationsOrganizationIdTrackingLinksPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsTrackingLinkResponse>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling organizationsOrganizationIdTrackingLinksPost().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling organizationsOrganizationIdTrackingLinksPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/organizations/{organization_id}/tracking-links`.replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters['organizationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelsTrackingLinkRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsTrackingLinkResponseFromJSON(jsonValue));
    }

    /**
     * Create a new tracking link for a campaign and affiliate
     * Create a new tracking link
     */
    async organizationsOrganizationIdTrackingLinksPost(requestParameters: OrganizationsOrganizationIdTrackingLinksPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsTrackingLinkResponse> {
        const response = await this.organizationsOrganizationIdTrackingLinksPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a tracking link by its ID
     * Delete a tracking link
     */
    async organizationsOrganizationIdTrackingLinksTrackingLinkIdDeleteRaw(requestParameters: OrganizationsOrganizationIdTrackingLinksTrackingLinkIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling organizationsOrganizationIdTrackingLinksTrackingLinkIdDelete().'
            );
        }

        if (requestParameters['trackingLinkId'] == null) {
            throw new runtime.RequiredError(
                'trackingLinkId',
                'Required parameter "trackingLinkId" was null or undefined when calling organizationsOrganizationIdTrackingLinksTrackingLinkIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/organizations/{organization_id}/tracking-links/{tracking_link_id}`.replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"tracking_link_id"}}`, encodeURIComponent(String(requestParameters['trackingLinkId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a tracking link by its ID
     * Delete a tracking link
     */
    async organizationsOrganizationIdTrackingLinksTrackingLinkIdDelete(requestParameters: OrganizationsOrganizationIdTrackingLinksTrackingLinkIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.organizationsOrganizationIdTrackingLinksTrackingLinkIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a tracking link by its ID
     * Get a tracking link
     */
    async organizationsOrganizationIdTrackingLinksTrackingLinkIdGetRaw(requestParameters: OrganizationsOrganizationIdTrackingLinksTrackingLinkIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsTrackingLinkResponse>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling organizationsOrganizationIdTrackingLinksTrackingLinkIdGet().'
            );
        }

        if (requestParameters['trackingLinkId'] == null) {
            throw new runtime.RequiredError(
                'trackingLinkId',
                'Required parameter "trackingLinkId" was null or undefined when calling organizationsOrganizationIdTrackingLinksTrackingLinkIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/organizations/{organization_id}/tracking-links/{tracking_link_id}`.replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"tracking_link_id"}}`, encodeURIComponent(String(requestParameters['trackingLinkId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsTrackingLinkResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a tracking link by its ID
     * Get a tracking link
     */
    async organizationsOrganizationIdTrackingLinksTrackingLinkIdGet(requestParameters: OrganizationsOrganizationIdTrackingLinksTrackingLinkIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsTrackingLinkResponse> {
        const response = await this.organizationsOrganizationIdTrackingLinksTrackingLinkIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing tracking link
     * Update a tracking link
     */
    async organizationsOrganizationIdTrackingLinksTrackingLinkIdPutRaw(requestParameters: OrganizationsOrganizationIdTrackingLinksTrackingLinkIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsTrackingLinkResponse>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling organizationsOrganizationIdTrackingLinksTrackingLinkIdPut().'
            );
        }

        if (requestParameters['trackingLinkId'] == null) {
            throw new runtime.RequiredError(
                'trackingLinkId',
                'Required parameter "trackingLinkId" was null or undefined when calling organizationsOrganizationIdTrackingLinksTrackingLinkIdPut().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling organizationsOrganizationIdTrackingLinksTrackingLinkIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/organizations/{organization_id}/tracking-links/{tracking_link_id}`.replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"tracking_link_id"}}`, encodeURIComponent(String(requestParameters['trackingLinkId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModelsTrackingLinkUpdateRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsTrackingLinkResponseFromJSON(jsonValue));
    }

    /**
     * Update an existing tracking link
     * Update a tracking link
     */
    async organizationsOrganizationIdTrackingLinksTrackingLinkIdPut(requestParameters: OrganizationsOrganizationIdTrackingLinksTrackingLinkIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsTrackingLinkResponse> {
        const response = await this.organizationsOrganizationIdTrackingLinksTrackingLinkIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate and return a QR code image for a tracking link
     * Get tracking link QR code
     */
    async organizationsOrganizationIdTrackingLinksTrackingLinkIdQrGetRaw(requestParameters: OrganizationsOrganizationIdTrackingLinksTrackingLinkIdQrGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling organizationsOrganizationIdTrackingLinksTrackingLinkIdQrGet().'
            );
        }

        if (requestParameters['trackingLinkId'] == null) {
            throw new runtime.RequiredError(
                'trackingLinkId',
                'Required parameter "trackingLinkId" was null or undefined when calling organizationsOrganizationIdTrackingLinksTrackingLinkIdQrGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/organizations/{organization_id}/tracking-links/{tracking_link_id}/qr`.replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"tracking_link_id"}}`, encodeURIComponent(String(requestParameters['trackingLinkId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Generate and return a QR code image for a tracking link
     * Get tracking link QR code
     */
    async organizationsOrganizationIdTrackingLinksTrackingLinkIdQrGet(requestParameters: OrganizationsOrganizationIdTrackingLinksTrackingLinkIdQrGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.organizationsOrganizationIdTrackingLinksTrackingLinkIdQrGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Regenerate an existing tracking link with provider integration
     * Regenerate a tracking link
     */
    async organizationsOrganizationIdTrackingLinksTrackingLinkIdRegeneratePostRaw(requestParameters: OrganizationsOrganizationIdTrackingLinksTrackingLinkIdRegeneratePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsTrackingLinkGenerationResponse>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling organizationsOrganizationIdTrackingLinksTrackingLinkIdRegeneratePost().'
            );
        }

        if (requestParameters['trackingLinkId'] == null) {
            throw new runtime.RequiredError(
                'trackingLinkId',
                'Required parameter "trackingLinkId" was null or undefined when calling organizationsOrganizationIdTrackingLinksTrackingLinkIdRegeneratePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/organizations/{organization_id}/tracking-links/{tracking_link_id}/regenerate`.replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"tracking_link_id"}}`, encodeURIComponent(String(requestParameters['trackingLinkId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsTrackingLinkGenerationResponseFromJSON(jsonValue));
    }

    /**
     * Regenerate an existing tracking link with provider integration
     * Regenerate a tracking link
     */
    async organizationsOrganizationIdTrackingLinksTrackingLinkIdRegeneratePost(requestParameters: OrganizationsOrganizationIdTrackingLinksTrackingLinkIdRegeneratePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsTrackingLinkGenerationResponse> {
        const response = await this.organizationsOrganizationIdTrackingLinksTrackingLinkIdRegeneratePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new tracking link or update an existing one based on campaign_id and affiliate_id
     * Upsert a tracking link by campaign and affiliate
     */
    async organizationsOrganizationIdTrackingLinksUpsertPostRaw(requestParameters: OrganizationsOrganizationIdTrackingLinksUpsertPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsTrackingLinkUpsertResponse>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling organizationsOrganizationIdTrackingLinksUpsertPost().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling organizationsOrganizationIdTrackingLinksUpsertPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/organizations/{organization_id}/tracking-links/upsert`.replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters['organizationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelsTrackingLinkUpsertRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsTrackingLinkUpsertResponseFromJSON(jsonValue));
    }

    /**
     * Create a new tracking link or update an existing one based on campaign_id and affiliate_id
     * Upsert a tracking link by campaign and affiliate
     */
    async organizationsOrganizationIdTrackingLinksUpsertPost(requestParameters: OrganizationsOrganizationIdTrackingLinksUpsertPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsTrackingLinkUpsertResponse> {
        const response = await this.organizationsOrganizationIdTrackingLinksUpsertPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
