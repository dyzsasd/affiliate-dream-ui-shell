/* tslint:disable */
/* eslint-disable */
/**
 * Affiliate Backend API
 * API Server for Affiliate Backend Application
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DomainAgencyDelegation,
  DomainCreateDelegationRequest,
  DomainPermissionCheckRequest,
  DomainPermissionCheckResponse,
  HandlersErrorResponse,
  HandlersUpdateExpirationRequest,
  HandlersUpdatePermissionsRequest,
} from '../models/index';
import {
    DomainAgencyDelegationFromJSON,
    DomainAgencyDelegationToJSON,
    DomainCreateDelegationRequestFromJSON,
    DomainCreateDelegationRequestToJSON,
    DomainPermissionCheckRequestFromJSON,
    DomainPermissionCheckRequestToJSON,
    DomainPermissionCheckResponseFromJSON,
    DomainPermissionCheckResponseToJSON,
    HandlersErrorResponseFromJSON,
    HandlersErrorResponseToJSON,
    HandlersUpdateExpirationRequestFromJSON,
    HandlersUpdateExpirationRequestToJSON,
    HandlersUpdatePermissionsRequestFromJSON,
    HandlersUpdatePermissionsRequestToJSON,
} from '../models/index';

export interface AgencyDelegationsAdvertiserAdvertiserOrgIdGetRequest {
    advertiserOrgId: number;
}

export interface AgencyDelegationsAgencyAgencyOrgIdGetRequest {
    agencyOrgId: number;
}

export interface AgencyDelegationsCheckPermissionsPostRequest {
    request: DomainPermissionCheckRequest;
}

export interface AgencyDelegationsGetRequest {
    agencyOrgId?: number;
    advertiserOrgId?: number;
    status?: AgencyDelegationsGetStatusEnum;
    includeExpired?: boolean;
    limit?: number;
    offset?: number;
    withDetails?: boolean;
}

export interface AgencyDelegationsIdAcceptPostRequest {
    id: number;
}

export interface AgencyDelegationsIdExpirationPutRequest {
    id: number;
    request: HandlersUpdateExpirationRequest;
}

export interface AgencyDelegationsIdGetRequest {
    id: number;
    withDetails?: boolean;
}

export interface AgencyDelegationsIdPermissionsPutRequest {
    id: number;
    request: HandlersUpdatePermissionsRequest;
}

export interface AgencyDelegationsIdReactivatePostRequest {
    id: number;
}

export interface AgencyDelegationsIdRejectPostRequest {
    id: number;
}

export interface AgencyDelegationsIdRevokePostRequest {
    id: number;
}

export interface AgencyDelegationsIdSuspendPostRequest {
    id: number;
}

export interface AgencyDelegationsPostRequest {
    request: DomainCreateDelegationRequest;
}

/**
 * 
 */
export class AgencyDelegationsApi extends runtime.BaseAPI {

    /**
     * Get all active delegations for an advertiser organization
     * Get advertiser delegations
     */
    async agencyDelegationsAdvertiserAdvertiserOrgIdGetRaw(requestParameters: AgencyDelegationsAdvertiserAdvertiserOrgIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DomainAgencyDelegation>>> {
        if (requestParameters['advertiserOrgId'] == null) {
            throw new runtime.RequiredError(
                'advertiserOrgId',
                'Required parameter "advertiserOrgId" was null or undefined when calling agencyDelegationsAdvertiserAdvertiserOrgIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/agency-delegations/advertiser/{advertiser_org_id}`.replace(`{${"advertiser_org_id"}}`, encodeURIComponent(String(requestParameters['advertiserOrgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DomainAgencyDelegationFromJSON));
    }

    /**
     * Get all active delegations for an advertiser organization
     * Get advertiser delegations
     */
    async agencyDelegationsAdvertiserAdvertiserOrgIdGet(requestParameters: AgencyDelegationsAdvertiserAdvertiserOrgIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DomainAgencyDelegation>> {
        const response = await this.agencyDelegationsAdvertiserAdvertiserOrgIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all active delegations for an agency organization
     * Get agency delegations
     */
    async agencyDelegationsAgencyAgencyOrgIdGetRaw(requestParameters: AgencyDelegationsAgencyAgencyOrgIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DomainAgencyDelegation>>> {
        if (requestParameters['agencyOrgId'] == null) {
            throw new runtime.RequiredError(
                'agencyOrgId',
                'Required parameter "agencyOrgId" was null or undefined when calling agencyDelegationsAgencyAgencyOrgIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/agency-delegations/agency/{agency_org_id}`.replace(`{${"agency_org_id"}}`, encodeURIComponent(String(requestParameters['agencyOrgId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DomainAgencyDelegationFromJSON));
    }

    /**
     * Get all active delegations for an agency organization
     * Get agency delegations
     */
    async agencyDelegationsAgencyAgencyOrgIdGet(requestParameters: AgencyDelegationsAgencyAgencyOrgIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DomainAgencyDelegation>> {
        const response = await this.agencyDelegationsAgencyAgencyOrgIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check if an agency has specific permissions for an advertiser organization
     * Check permissions
     */
    async agencyDelegationsCheckPermissionsPostRaw(requestParameters: AgencyDelegationsCheckPermissionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainPermissionCheckResponse>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling agencyDelegationsCheckPermissionsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/agency-delegations/check-permissions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DomainPermissionCheckRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainPermissionCheckResponseFromJSON(jsonValue));
    }

    /**
     * Check if an agency has specific permissions for an advertiser organization
     * Check permissions
     */
    async agencyDelegationsCheckPermissionsPost(requestParameters: AgencyDelegationsCheckPermissionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainPermissionCheckResponse> {
        const response = await this.agencyDelegationsCheckPermissionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List agency delegations with optional filtering
     * List delegations
     */
    async agencyDelegationsGetRaw(requestParameters: AgencyDelegationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DomainAgencyDelegation>>> {
        const queryParameters: any = {};

        if (requestParameters['agencyOrgId'] != null) {
            queryParameters['agency_org_id'] = requestParameters['agencyOrgId'];
        }

        if (requestParameters['advertiserOrgId'] != null) {
            queryParameters['advertiser_org_id'] = requestParameters['advertiserOrgId'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['includeExpired'] != null) {
            queryParameters['include_expired'] = requestParameters['includeExpired'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['withDetails'] != null) {
            queryParameters['with_details'] = requestParameters['withDetails'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/agency-delegations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DomainAgencyDelegationFromJSON));
    }

    /**
     * List agency delegations with optional filtering
     * List delegations
     */
    async agencyDelegationsGet(requestParameters: AgencyDelegationsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DomainAgencyDelegation>> {
        const response = await this.agencyDelegationsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Accept a pending agency delegation
     * Accept delegation
     */
    async agencyDelegationsIdAcceptPostRaw(requestParameters: AgencyDelegationsIdAcceptPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainAgencyDelegation>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling agencyDelegationsIdAcceptPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/agency-delegations/{id}/accept`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainAgencyDelegationFromJSON(jsonValue));
    }

    /**
     * Accept a pending agency delegation
     * Accept delegation
     */
    async agencyDelegationsIdAcceptPost(requestParameters: AgencyDelegationsIdAcceptPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainAgencyDelegation> {
        const response = await this.agencyDelegationsIdAcceptPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the expiration date of an agency delegation
     * Update delegation expiration
     */
    async agencyDelegationsIdExpirationPutRaw(requestParameters: AgencyDelegationsIdExpirationPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainAgencyDelegation>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling agencyDelegationsIdExpirationPut().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling agencyDelegationsIdExpirationPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/agency-delegations/{id}/expiration`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HandlersUpdateExpirationRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainAgencyDelegationFromJSON(jsonValue));
    }

    /**
     * Update the expiration date of an agency delegation
     * Update delegation expiration
     */
    async agencyDelegationsIdExpirationPut(requestParameters: AgencyDelegationsIdExpirationPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainAgencyDelegation> {
        const response = await this.agencyDelegationsIdExpirationPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an agency delegation by ID
     * Get delegation
     */
    async agencyDelegationsIdGetRaw(requestParameters: AgencyDelegationsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainAgencyDelegation>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling agencyDelegationsIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['withDetails'] != null) {
            queryParameters['with_details'] = requestParameters['withDetails'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/agency-delegations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainAgencyDelegationFromJSON(jsonValue));
    }

    /**
     * Get an agency delegation by ID
     * Get delegation
     */
    async agencyDelegationsIdGet(requestParameters: AgencyDelegationsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainAgencyDelegation> {
        const response = await this.agencyDelegationsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the permissions of an agency delegation
     * Update delegation permissions
     */
    async agencyDelegationsIdPermissionsPutRaw(requestParameters: AgencyDelegationsIdPermissionsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainAgencyDelegation>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling agencyDelegationsIdPermissionsPut().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling agencyDelegationsIdPermissionsPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/agency-delegations/{id}/permissions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HandlersUpdatePermissionsRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainAgencyDelegationFromJSON(jsonValue));
    }

    /**
     * Update the permissions of an agency delegation
     * Update delegation permissions
     */
    async agencyDelegationsIdPermissionsPut(requestParameters: AgencyDelegationsIdPermissionsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainAgencyDelegation> {
        const response = await this.agencyDelegationsIdPermissionsPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reactivate a suspended agency delegation
     * Reactivate delegation
     */
    async agencyDelegationsIdReactivatePostRaw(requestParameters: AgencyDelegationsIdReactivatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainAgencyDelegation>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling agencyDelegationsIdReactivatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/agency-delegations/{id}/reactivate`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainAgencyDelegationFromJSON(jsonValue));
    }

    /**
     * Reactivate a suspended agency delegation
     * Reactivate delegation
     */
    async agencyDelegationsIdReactivatePost(requestParameters: AgencyDelegationsIdReactivatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainAgencyDelegation> {
        const response = await this.agencyDelegationsIdReactivatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reject a pending agency delegation
     * Reject delegation
     */
    async agencyDelegationsIdRejectPostRaw(requestParameters: AgencyDelegationsIdRejectPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainAgencyDelegation>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling agencyDelegationsIdRejectPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/agency-delegations/{id}/reject`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainAgencyDelegationFromJSON(jsonValue));
    }

    /**
     * Reject a pending agency delegation
     * Reject delegation
     */
    async agencyDelegationsIdRejectPost(requestParameters: AgencyDelegationsIdRejectPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainAgencyDelegation> {
        const response = await this.agencyDelegationsIdRejectPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Revoke an agency delegation
     * Revoke delegation
     */
    async agencyDelegationsIdRevokePostRaw(requestParameters: AgencyDelegationsIdRevokePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainAgencyDelegation>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling agencyDelegationsIdRevokePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/agency-delegations/{id}/revoke`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainAgencyDelegationFromJSON(jsonValue));
    }

    /**
     * Revoke an agency delegation
     * Revoke delegation
     */
    async agencyDelegationsIdRevokePost(requestParameters: AgencyDelegationsIdRevokePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainAgencyDelegation> {
        const response = await this.agencyDelegationsIdRevokePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Suspend an active agency delegation
     * Suspend delegation
     */
    async agencyDelegationsIdSuspendPostRaw(requestParameters: AgencyDelegationsIdSuspendPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainAgencyDelegation>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling agencyDelegationsIdSuspendPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/agency-delegations/{id}/suspend`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainAgencyDelegationFromJSON(jsonValue));
    }

    /**
     * Suspend an active agency delegation
     * Suspend delegation
     */
    async agencyDelegationsIdSuspendPost(requestParameters: AgencyDelegationsIdSuspendPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainAgencyDelegation> {
        const response = await this.agencyDelegationsIdSuspendPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all available delegation permissions
     * Get available permissions
     */
    async agencyDelegationsPermissionsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/agency-delegations/permissions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get all available delegation permissions
     * Get available permissions
     */
    async agencyDelegationsPermissionsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.agencyDelegationsPermissionsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a new delegation from advertiser organization to agency organization
     * Create agency delegation
     */
    async agencyDelegationsPostRaw(requestParameters: AgencyDelegationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainAgencyDelegation>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling agencyDelegationsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/agency-delegations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DomainCreateDelegationRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainAgencyDelegationFromJSON(jsonValue));
    }

    /**
     * Create a new delegation from advertiser organization to agency organization
     * Create agency delegation
     */
    async agencyDelegationsPost(requestParameters: AgencyDelegationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainAgencyDelegation> {
        const response = await this.agencyDelegationsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AgencyDelegationsGetStatusEnum = {
    Pending: 'pending',
    Active: 'active',
    Suspended: 'suspended',
    Revoked: 'revoked'
} as const;
export type AgencyDelegationsGetStatusEnum = typeof AgencyDelegationsGetStatusEnum[keyof typeof AgencyDelegationsGetStatusEnum];
