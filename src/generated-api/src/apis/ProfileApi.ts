
/* tslint:disable */
/* eslint-disable */
/**
 * Affiliate Backend API
 * API Server for Affiliate Backend Application
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DomainProfile,
  HandlersProfileRequest,
  HandlersUpsertProfileRequest,
} from '../models/index';
import {
    DomainProfileFromJSON,
    DomainProfileToJSON,
    HandlersProfileRequestFromJSON,
    HandlersProfileRequestToJSON,
    HandlersUpsertProfileRequestFromJSON,
    HandlersUpsertProfileRequestToJSON,
} from '../models/index';

export interface ProfilesIdDeleteRequest {
    id: string;
}

export interface ProfilesIdPutRequest {
    id: string;
    profile: HandlersProfileRequest;
}

export interface ProfilesPostRequest {
    profile: HandlersProfileRequest;
}

export interface ProfilesUpsertPostRequest {
    profile: HandlersUpsertProfileRequest;
}

/**
 * 
 */
export class ProfileApi extends runtime.BaseAPI {

    /**
     * Deletes an existing user profile
     * Delete a profile
     */
    async profilesIdDeleteRaw(requestParameters: ProfilesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling profilesIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/profiles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an existing user profile
     * Delete a profile
     */
    async profilesIdDelete(requestParameters: ProfilesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.profilesIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Updates an existing user profile
     * Update a profile
     */
    async profilesIdPutRaw(requestParameters: ProfilesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainProfile>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling profilesIdPut().'
            );
        }

        if (requestParameters['profile'] == null) {
            throw new runtime.RequiredError(
                'profile',
                'Required parameter "profile" was null or undefined when calling profilesIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/profiles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HandlersProfileRequestToJSON(requestParameters['profile']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainProfileFromJSON(jsonValue));
    }

    /**
     * Updates an existing user profile
     * Update a profile
     */
    async profilesIdPut(requestParameters: ProfilesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainProfile> {
        const response = await this.profilesIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new user profile
     * Create a new profile
     */
    async profilesPostRaw(requestParameters: ProfilesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainProfile>> {
        if (requestParameters['profile'] == null) {
            throw new runtime.RequiredError(
                'profile',
                'Required parameter "profile" was null or undefined when calling profilesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/profiles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HandlersProfileRequestToJSON(requestParameters['profile']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainProfileFromJSON(jsonValue));
    }

    /**
     * Creates a new user profile
     * Create a new profile
     */
    async profilesPost(requestParameters: ProfilesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainProfile> {
        const response = await this.profilesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new profile if it doesn\'t exist, or updates an existing one
     * Upsert a profile
     */
    async profilesUpsertPostRaw(requestParameters: ProfilesUpsertPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainProfile>> {
        if (requestParameters['profile'] == null) {
            throw new runtime.RequiredError(
                'profile',
                'Required parameter "profile" was null or undefined when calling profilesUpsertPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/profiles/upsert`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HandlersUpsertProfileRequestToJSON(requestParameters['profile']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainProfileFromJSON(jsonValue));
    }

    /**
     * Creates a new profile if it doesn\'t exist, or updates an existing one
     * Upsert a profile
     */
    async profilesUpsertPost(requestParameters: ProfilesUpsertPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainProfile> {
        const response = await this.profilesUpsertPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the profile of the currently authenticated user
     * Get current user profile
     */
    async usersMeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainProfile>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        // Ensure we have a valid base path before making the request
        const basePath = this.configuration.basePath || runtime.BASE_PATH;
        console.log("Making usersMeGet request to:", `${basePath}/users/me`);

        const response = await this.request({
            path: `/users/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainProfileFromJSON(jsonValue));
    }

    /**
     * Retrieves the profile of the currently authenticated user
     * Get current user profile
     */
    async usersMeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainProfile> {
        const response = await this.usersMeGetRaw(initOverrides);
        return await response.value();
    }
}
