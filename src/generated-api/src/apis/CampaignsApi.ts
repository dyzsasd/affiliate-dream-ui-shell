/* tslint:disable */
/* eslint-disable */
/**
 * Affiliate Backend API
 * API Server for Affiliate Backend Application
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DomainCampaign,
  DomainCampaignProviderOffer,
  HandlersCreateCampaignProviderOfferRequest,
  HandlersCreateCampaignRequest,
  HandlersUpdateCampaignProviderOfferRequest,
  HandlersUpdateCampaignRequest,
} from '../models/index';
import {
    DomainCampaignFromJSON,
    DomainCampaignToJSON,
    DomainCampaignProviderOfferFromJSON,
    DomainCampaignProviderOfferToJSON,
    HandlersCreateCampaignProviderOfferRequestFromJSON,
    HandlersCreateCampaignProviderOfferRequestToJSON,
    HandlersCreateCampaignRequestFromJSON,
    HandlersCreateCampaignRequestToJSON,
    HandlersUpdateCampaignProviderOfferRequestFromJSON,
    HandlersUpdateCampaignProviderOfferRequestToJSON,
    HandlersUpdateCampaignRequestFromJSON,
    HandlersUpdateCampaignRequestToJSON,
} from '../models/index';

export interface AdvertisersIdCampaignsGetRequest {
    id: number;
    page?: number;
    pageSize?: number;
}

export interface CampaignProviderOffersIdDeleteRequest {
    id: number;
}

export interface CampaignProviderOffersIdGetRequest {
    id: number;
}

export interface CampaignProviderOffersIdPutRequest {
    id: number;
    request: HandlersUpdateCampaignProviderOfferRequest;
}

export interface CampaignProviderOffersPostRequest {
    request: HandlersCreateCampaignProviderOfferRequest;
}

export interface CampaignsIdDeleteRequest {
    id: number;
}

export interface CampaignsIdGetRequest {
    id: number;
}

export interface CampaignsIdProviderOffersGetRequest {
    id: number;
}

export interface CampaignsIdPutRequest {
    id: number;
    request: HandlersUpdateCampaignRequest;
}

export interface CampaignsPostRequest {
    request: HandlersCreateCampaignRequest;
}

export interface OrganizationsIdCampaignsGetRequest {
    id: number;
    page?: number;
    pageSize?: number;
}

/**
 * 
 */
export class CampaignsApi extends runtime.BaseAPI {

    /**
     * Retrieves a list of campaigns for an advertiser with pagination
     * List campaigns by advertiser
     */
    async advertisersIdCampaignsGetRaw(requestParameters: AdvertisersIdCampaignsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DomainCampaign>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling advertisersIdCampaignsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/advertisers/{id}/campaigns`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DomainCampaignFromJSON));
    }

    /**
     * Retrieves a list of campaigns for an advertiser with pagination
     * List campaigns by advertiser
     */
    async advertisersIdCampaignsGet(requestParameters: AdvertisersIdCampaignsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DomainCampaign>> {
        const response = await this.advertisersIdCampaignsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a campaign provider offer by its ID
     * Delete campaign provider offer
     */
    async campaignProviderOffersIdDeleteRaw(requestParameters: CampaignProviderOffersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling campaignProviderOffersIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/campaign-provider-offers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a campaign provider offer by its ID
     * Delete campaign provider offer
     */
    async campaignProviderOffersIdDelete(requestParameters: CampaignProviderOffersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.campaignProviderOffersIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a campaign provider offer by its ID
     * Get campaign provider offer by ID
     */
    async campaignProviderOffersIdGetRaw(requestParameters: CampaignProviderOffersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainCampaignProviderOffer>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling campaignProviderOffersIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/campaign-provider-offers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainCampaignProviderOfferFromJSON(jsonValue));
    }

    /**
     * Retrieves a campaign provider offer by its ID
     * Get campaign provider offer by ID
     */
    async campaignProviderOffersIdGet(requestParameters: CampaignProviderOffersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainCampaignProviderOffer> {
        const response = await this.campaignProviderOffersIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a campaign provider offer with the given details
     * Update campaign provider offer
     */
    async campaignProviderOffersIdPutRaw(requestParameters: CampaignProviderOffersIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainCampaignProviderOffer>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling campaignProviderOffersIdPut().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling campaignProviderOffersIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/campaign-provider-offers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HandlersUpdateCampaignProviderOfferRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainCampaignProviderOfferFromJSON(jsonValue));
    }

    /**
     * Updates a campaign provider offer with the given details
     * Update campaign provider offer
     */
    async campaignProviderOffersIdPut(requestParameters: CampaignProviderOffersIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainCampaignProviderOffer> {
        const response = await this.campaignProviderOffersIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new offer for a campaign on a provider
     * Create a new campaign provider offer
     */
    async campaignProviderOffersPostRaw(requestParameters: CampaignProviderOffersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainCampaignProviderOffer>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling campaignProviderOffersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/campaign-provider-offers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HandlersCreateCampaignProviderOfferRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainCampaignProviderOfferFromJSON(jsonValue));
    }

    /**
     * Creates a new offer for a campaign on a provider
     * Create a new campaign provider offer
     */
    async campaignProviderOffersPost(requestParameters: CampaignProviderOffersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainCampaignProviderOffer> {
        const response = await this.campaignProviderOffersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a campaign by its ID
     * Delete campaign
     */
    async campaignsIdDeleteRaw(requestParameters: CampaignsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling campaignsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/campaigns/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a campaign by its ID
     * Delete campaign
     */
    async campaignsIdDelete(requestParameters: CampaignsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.campaignsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a campaign by its ID
     * Get campaign by ID
     */
    async campaignsIdGetRaw(requestParameters: CampaignsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainCampaign>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling campaignsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/campaigns/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainCampaignFromJSON(jsonValue));
    }

    /**
     * Retrieves a campaign by its ID
     * Get campaign by ID
     */
    async campaignsIdGet(requestParameters: CampaignsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainCampaign> {
        const response = await this.campaignsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of provider offers for a campaign
     * List campaign provider offers by campaign
     */
    async campaignsIdProviderOffersGetRaw(requestParameters: CampaignsIdProviderOffersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DomainCampaignProviderOffer>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling campaignsIdProviderOffersGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/campaigns/{id}/provider-offers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DomainCampaignProviderOfferFromJSON));
    }

    /**
     * Retrieves a list of provider offers for a campaign
     * List campaign provider offers by campaign
     */
    async campaignsIdProviderOffersGet(requestParameters: CampaignsIdProviderOffersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DomainCampaignProviderOffer>> {
        const response = await this.campaignsIdProviderOffersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a campaign with the given details
     * Update campaign
     */
    async campaignsIdPutRaw(requestParameters: CampaignsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainCampaign>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling campaignsIdPut().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling campaignsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/campaigns/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HandlersUpdateCampaignRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainCampaignFromJSON(jsonValue));
    }

    /**
     * Updates a campaign with the given details
     * Update campaign
     */
    async campaignsIdPut(requestParameters: CampaignsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainCampaign> {
        const response = await this.campaignsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new campaign with the given details
     * Create a new campaign
     */
    async campaignsPostRaw(requestParameters: CampaignsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainCampaign>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling campaignsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/campaigns`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HandlersCreateCampaignRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainCampaignFromJSON(jsonValue));
    }

    /**
     * Creates a new campaign with the given details
     * Create a new campaign
     */
    async campaignsPost(requestParameters: CampaignsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainCampaign> {
        const response = await this.campaignsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of campaigns for an organization with pagination
     * List campaigns by organization
     */
    async organizationsIdCampaignsGetRaw(requestParameters: OrganizationsIdCampaignsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DomainCampaign>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling organizationsIdCampaignsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/organizations/{id}/campaigns`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DomainCampaignFromJSON));
    }

    /**
     * Retrieves a list of campaigns for an organization with pagination
     * List campaigns by organization
     */
    async organizationsIdCampaignsGet(requestParameters: OrganizationsIdCampaignsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DomainCampaign>> {
        const response = await this.organizationsIdCampaignsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
