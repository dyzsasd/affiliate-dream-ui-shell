/* tslint:disable */
/* eslint-disable */
/**
 * Affiliate Backend API
 * API Server for Affiliate Backend Application
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HandlersErrorResponse,
  ModelsCampaignListResponse,
  ModelsCampaignResponse,
  ModelsCreateCampaignRequest,
  ModelsGetCampaignProviderMappingResponse,
  ModelsUpdateCampaignRequest,
} from '../models/index';
import {
    HandlersErrorResponseFromJSON,
    HandlersErrorResponseToJSON,
    ModelsCampaignListResponseFromJSON,
    ModelsCampaignListResponseToJSON,
    ModelsCampaignResponseFromJSON,
    ModelsCampaignResponseToJSON,
    ModelsCreateCampaignRequestFromJSON,
    ModelsCreateCampaignRequestToJSON,
    ModelsGetCampaignProviderMappingResponseFromJSON,
    ModelsGetCampaignProviderMappingResponseToJSON,
    ModelsUpdateCampaignRequestFromJSON,
    ModelsUpdateCampaignRequestToJSON,
} from '../models/index';

export interface AdvertisersIdCampaignsGetRequest {
    id: number;
    page?: number;
    pageSize?: number;
}

export interface CampaignsIdDeleteRequest {
    id: number;
}

export interface CampaignsIdGetRequest {
    id: number;
}

export interface CampaignsIdProviderMappingsProviderTypeGetRequest {
    id: number;
    providerType: string;
}

export interface CampaignsIdPutRequest {
    id: number;
    campaign: ModelsUpdateCampaignRequest;
}

export interface CampaignsPostRequest {
    campaign: ModelsCreateCampaignRequest;
}

export interface OrganizationsOrganizationIdCampaignsGetRequest {
    organizationId: number;
    page?: number;
    pageSize?: number;
}

/**
 * 
 */
export class CampaignsApi extends runtime.BaseAPI {

    /**
     * Retrieve campaigns for a specific advertiser with pagination
     * List campaigns by advertiser
     */
    async advertisersIdCampaignsGetRaw(requestParameters: AdvertisersIdCampaignsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsCampaignListResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling advertisersIdCampaignsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/advertisers/{id}/campaigns`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsCampaignListResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve campaigns for a specific advertiser with pagination
     * List campaigns by advertiser
     */
    async advertisersIdCampaignsGet(requestParameters: AdvertisersIdCampaignsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsCampaignListResponse> {
        const response = await this.advertisersIdCampaignsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a campaign by its ID
     * Delete a campaign
     */
    async campaignsIdDeleteRaw(requestParameters: CampaignsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling campaignsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/campaigns/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a campaign by its ID
     * Delete a campaign
     */
    async campaignsIdDelete(requestParameters: CampaignsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.campaignsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a campaign by its ID
     * Get a campaign by ID
     */
    async campaignsIdGetRaw(requestParameters: CampaignsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsCampaignResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling campaignsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/campaigns/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsCampaignResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a campaign by its ID
     * Get a campaign by ID
     */
    async campaignsIdGet(requestParameters: CampaignsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsCampaignResponse> {
        const response = await this.campaignsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a campaign provider mapping by campaign ID and provider type
     * Get campaign provider mapping
     */
    async campaignsIdProviderMappingsProviderTypeGetRaw(requestParameters: CampaignsIdProviderMappingsProviderTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsGetCampaignProviderMappingResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling campaignsIdProviderMappingsProviderTypeGet().'
            );
        }

        if (requestParameters['providerType'] == null) {
            throw new runtime.RequiredError(
                'providerType',
                'Required parameter "providerType" was null or undefined when calling campaignsIdProviderMappingsProviderTypeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/campaigns/{id}/provider-mappings/{providerType}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"providerType"}}`, encodeURIComponent(String(requestParameters['providerType']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsGetCampaignProviderMappingResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a campaign provider mapping by campaign ID and provider type
     * Get campaign provider mapping
     */
    async campaignsIdProviderMappingsProviderTypeGet(requestParameters: CampaignsIdProviderMappingsProviderTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsGetCampaignProviderMappingResponse> {
        const response = await this.campaignsIdProviderMappingsProviderTypeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing campaign with the provided details
     * Update a campaign
     */
    async campaignsIdPutRaw(requestParameters: CampaignsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsCampaignResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling campaignsIdPut().'
            );
        }

        if (requestParameters['campaign'] == null) {
            throw new runtime.RequiredError(
                'campaign',
                'Required parameter "campaign" was null or undefined when calling campaignsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/campaigns/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModelsUpdateCampaignRequestToJSON(requestParameters['campaign']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsCampaignResponseFromJSON(jsonValue));
    }

    /**
     * Update an existing campaign with the provided details
     * Update a campaign
     */
    async campaignsIdPut(requestParameters: CampaignsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsCampaignResponse> {
        const response = await this.campaignsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new campaign with the provided details
     * Create a new campaign
     */
    async campaignsPostRaw(requestParameters: CampaignsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsCampaignResponse>> {
        if (requestParameters['campaign'] == null) {
            throw new runtime.RequiredError(
                'campaign',
                'Required parameter "campaign" was null or undefined when calling campaignsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/campaigns`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelsCreateCampaignRequestToJSON(requestParameters['campaign']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsCampaignResponseFromJSON(jsonValue));
    }

    /**
     * Create a new campaign with the provided details
     * Create a new campaign
     */
    async campaignsPost(requestParameters: CampaignsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsCampaignResponse> {
        const response = await this.campaignsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve campaigns for a specific organization with pagination
     * List campaigns by organization
     */
    async organizationsOrganizationIdCampaignsGetRaw(requestParameters: OrganizationsOrganizationIdCampaignsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsCampaignListResponse>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling organizationsOrganizationIdCampaignsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/organizations/{organization_id}/campaigns`.replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters['organizationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsCampaignListResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve campaigns for a specific organization with pagination
     * List campaigns by organization
     */
    async organizationsOrganizationIdCampaignsGet(requestParameters: OrganizationsOrganizationIdCampaignsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsCampaignListResponse> {
        const response = await this.organizationsOrganizationIdCampaignsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
