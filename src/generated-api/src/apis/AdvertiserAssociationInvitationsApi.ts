/* tslint:disable */
/* eslint-disable */
/**
 * Affiliate Backend API
 * API Server for Affiliate Backend Application
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DomainAdvertiserAssociationInvitation,
  DomainAdvertiserAssociationInvitationWithDetails,
  DomainCreateInvitationRequest,
  DomainInvitationUsageLog,
  DomainUpdateInvitationRequest,
  DomainUseInvitationRequest,
  DomainUseInvitationResponse,
  HandlersErrorResponse,
} from '../models/index';
import {
    DomainAdvertiserAssociationInvitationFromJSON,
    DomainAdvertiserAssociationInvitationToJSON,
    DomainAdvertiserAssociationInvitationWithDetailsFromJSON,
    DomainAdvertiserAssociationInvitationWithDetailsToJSON,
    DomainCreateInvitationRequestFromJSON,
    DomainCreateInvitationRequestToJSON,
    DomainInvitationUsageLogFromJSON,
    DomainInvitationUsageLogToJSON,
    DomainUpdateInvitationRequestFromJSON,
    DomainUpdateInvitationRequestToJSON,
    DomainUseInvitationRequestFromJSON,
    DomainUseInvitationRequestToJSON,
    DomainUseInvitationResponseFromJSON,
    DomainUseInvitationResponseToJSON,
    HandlersErrorResponseFromJSON,
    HandlersErrorResponseToJSON,
} from '../models/index';

export interface AdvertiserAssociationInvitationsGetRequest {
    advertiserOrgId?: number;
    status?: AdvertiserAssociationInvitationsGetStatusEnum;
    createdByUserId?: string;
    includeExpired?: boolean;
    limit?: number;
    offset?: number;
}

export interface AdvertiserAssociationInvitationsIdDeleteRequest {
    id: number;
}

export interface AdvertiserAssociationInvitationsIdGetRequest {
    id: number;
}

export interface AdvertiserAssociationInvitationsIdLinkGetRequest {
    id: number;
    baseUrl?: string;
}

export interface AdvertiserAssociationInvitationsIdPutRequest {
    id: number;
    request: DomainUpdateInvitationRequest;
}

export interface AdvertiserAssociationInvitationsIdUsageHistoryGetRequest {
    id: number;
    limit?: number;
}

export interface AdvertiserAssociationInvitationsPostRequest {
    request: DomainCreateInvitationRequest;
}

export interface AdvertiserAssociationInvitationsUsePostRequest {
    request: DomainUseInvitationRequest;
}

export interface PublicInvitationsTokenGetRequest {
    token: string;
}

/**
 * 
 */
export class AdvertiserAssociationInvitationsApi extends runtime.BaseAPI {

    /**
     * List advertiser association invitations with optional filters
     * List invitations
     */
    async advertiserAssociationInvitationsGetRaw(requestParameters: AdvertiserAssociationInvitationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DomainAdvertiserAssociationInvitationWithDetails>>> {
        const queryParameters: any = {};

        if (requestParameters['advertiserOrgId'] != null) {
            queryParameters['advertiser_org_id'] = requestParameters['advertiserOrgId'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['createdByUserId'] != null) {
            queryParameters['created_by_user_id'] = requestParameters['createdByUserId'];
        }

        if (requestParameters['includeExpired'] != null) {
            queryParameters['include_expired'] = requestParameters['includeExpired'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/advertiser-association-invitations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DomainAdvertiserAssociationInvitationWithDetailsFromJSON));
    }

    /**
     * List advertiser association invitations with optional filters
     * List invitations
     */
    async advertiserAssociationInvitationsGet(requestParameters: AdvertiserAssociationInvitationsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DomainAdvertiserAssociationInvitationWithDetails>> {
        const response = await this.advertiserAssociationInvitationsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an advertiser association invitation
     * Delete invitation
     */
    async advertiserAssociationInvitationsIdDeleteRaw(requestParameters: AdvertiserAssociationInvitationsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling advertiserAssociationInvitationsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/advertiser-association-invitations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an advertiser association invitation
     * Delete invitation
     */
    async advertiserAssociationInvitationsIdDelete(requestParameters: AdvertiserAssociationInvitationsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.advertiserAssociationInvitationsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get an advertiser association invitation by ID
     * Get invitation
     */
    async advertiserAssociationInvitationsIdGetRaw(requestParameters: AdvertiserAssociationInvitationsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainAdvertiserAssociationInvitationWithDetails>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling advertiserAssociationInvitationsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/advertiser-association-invitations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainAdvertiserAssociationInvitationWithDetailsFromJSON(jsonValue));
    }

    /**
     * Get an advertiser association invitation by ID
     * Get invitation
     */
    async advertiserAssociationInvitationsIdGet(requestParameters: AdvertiserAssociationInvitationsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainAdvertiserAssociationInvitationWithDetails> {
        const response = await this.advertiserAssociationInvitationsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate a full invitation link for sharing
     * Generate invitation link
     */
    async advertiserAssociationInvitationsIdLinkGetRaw(requestParameters: AdvertiserAssociationInvitationsIdLinkGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string | undefined; }>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling advertiserAssociationInvitationsIdLinkGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['baseUrl'] != null) {
            queryParameters['base_url'] = requestParameters['baseUrl'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/advertiser-association-invitations/{id}/link`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Generate a full invitation link for sharing
     * Generate invitation link
     */
    async advertiserAssociationInvitationsIdLinkGet(requestParameters: AdvertiserAssociationInvitationsIdLinkGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string | undefined; }> {
        const response = await this.advertiserAssociationInvitationsIdLinkGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an advertiser association invitation
     * Update invitation
     */
    async advertiserAssociationInvitationsIdPutRaw(requestParameters: AdvertiserAssociationInvitationsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainAdvertiserAssociationInvitation>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling advertiserAssociationInvitationsIdPut().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling advertiserAssociationInvitationsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/advertiser-association-invitations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DomainUpdateInvitationRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainAdvertiserAssociationInvitationFromJSON(jsonValue));
    }

    /**
     * Update an advertiser association invitation
     * Update invitation
     */
    async advertiserAssociationInvitationsIdPut(requestParameters: AdvertiserAssociationInvitationsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainAdvertiserAssociationInvitation> {
        const response = await this.advertiserAssociationInvitationsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get usage history for an advertiser association invitation
     * Get invitation usage history
     */
    async advertiserAssociationInvitationsIdUsageHistoryGetRaw(requestParameters: AdvertiserAssociationInvitationsIdUsageHistoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DomainInvitationUsageLog>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling advertiserAssociationInvitationsIdUsageHistoryGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/advertiser-association-invitations/{id}/usage-history`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DomainInvitationUsageLogFromJSON));
    }

    /**
     * Get usage history for an advertiser association invitation
     * Get invitation usage history
     */
    async advertiserAssociationInvitationsIdUsageHistoryGet(requestParameters: AdvertiserAssociationInvitationsIdUsageHistoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DomainInvitationUsageLog>> {
        const response = await this.advertiserAssociationInvitationsIdUsageHistoryGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new advertiser association invitation link
     * Create invitation
     */
    async advertiserAssociationInvitationsPostRaw(requestParameters: AdvertiserAssociationInvitationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainAdvertiserAssociationInvitation>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling advertiserAssociationInvitationsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/advertiser-association-invitations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DomainCreateInvitationRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainAdvertiserAssociationInvitationFromJSON(jsonValue));
    }

    /**
     * Create a new advertiser association invitation link
     * Create invitation
     */
    async advertiserAssociationInvitationsPost(requestParameters: AdvertiserAssociationInvitationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainAdvertiserAssociationInvitation> {
        const response = await this.advertiserAssociationInvitationsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use an invitation link to create an organization association request
     * Use invitation
     */
    async advertiserAssociationInvitationsUsePostRaw(requestParameters: AdvertiserAssociationInvitationsUsePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainUseInvitationResponse>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling advertiserAssociationInvitationsUsePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/advertiser-association-invitations/use`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DomainUseInvitationRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainUseInvitationResponseFromJSON(jsonValue));
    }

    /**
     * Use an invitation link to create an organization association request
     * Use invitation
     */
    async advertiserAssociationInvitationsUsePost(requestParameters: AdvertiserAssociationInvitationsUsePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainUseInvitationResponse> {
        const response = await this.advertiserAssociationInvitationsUsePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an advertiser association invitation by token (public endpoint for invitation links)
     * Get invitation by token
     */
    async publicInvitationsTokenGetRaw(requestParameters: PublicInvitationsTokenGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainAdvertiserAssociationInvitationWithDetails>> {
        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling publicInvitationsTokenGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/public/invitations/{token}`.replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainAdvertiserAssociationInvitationWithDetailsFromJSON(jsonValue));
    }

    /**
     * Get an advertiser association invitation by token (public endpoint for invitation links)
     * Get invitation by token
     */
    async publicInvitationsTokenGet(requestParameters: PublicInvitationsTokenGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainAdvertiserAssociationInvitationWithDetails> {
        const response = await this.publicInvitationsTokenGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AdvertiserAssociationInvitationsGetStatusEnum = {
    Active: 'active',
    Disabled: 'disabled',
    Expired: 'expired'
} as const;
export type AdvertiserAssociationInvitationsGetStatusEnum = typeof AdvertiserAssociationInvitationsGetStatusEnum[keyof typeof AdvertiserAssociationInvitationsGetStatusEnum];
