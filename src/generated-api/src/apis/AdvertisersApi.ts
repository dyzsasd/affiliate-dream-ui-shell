/* tslint:disable */
/* eslint-disable */
/**
 * Affiliate Backend API
 * API Server for Affiliate Backend Application
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DomainAdvertiser,
  DomainBulkSyncResult,
  ModelsAdvertiserResponse,
  ModelsCreateAdvertiserRequest,
  ModelsGetAdvertiserProviderMappingResponse,
  ModelsUpdateAdvertiserRequest,
} from '../models/index';
import {
    DomainAdvertiserFromJSON,
    DomainAdvertiserToJSON,
    DomainBulkSyncResultFromJSON,
    DomainBulkSyncResultToJSON,
    ModelsAdvertiserResponseFromJSON,
    ModelsAdvertiserResponseToJSON,
    ModelsCreateAdvertiserRequestFromJSON,
    ModelsCreateAdvertiserRequestToJSON,
    ModelsGetAdvertiserProviderMappingResponseFromJSON,
    ModelsGetAdvertiserProviderMappingResponseToJSON,
    ModelsUpdateAdvertiserRequestFromJSON,
    ModelsUpdateAdvertiserRequestToJSON,
} from '../models/index';

export interface AdvertisersIdCompareWithEverflowGetRequest {
    id: number;
}

export interface AdvertisersIdDeleteRequest {
    id: number;
}

export interface AdvertisersIdGetRequest {
    id: number;
}

export interface AdvertisersIdProviderMappingsProviderTypeGetRequest {
    id: number;
    providerType: string;
}

export interface AdvertisersIdPutRequest {
    id: number;
    request: ModelsUpdateAdvertiserRequest;
}

export interface AdvertisersIdSyncFromEverflowPostRequest {
    id: number;
}

export interface AdvertisersIdSyncToEverflowPostRequest {
    id: number;
}

export interface AdvertisersPostRequest {
    request: ModelsCreateAdvertiserRequest;
}

export interface OrganizationsIdAdvertisersGetRequest {
    id: number;
    page?: number;
    pageSize?: number;
}

/**
 * 
 */
export class AdvertisersApi extends runtime.BaseAPI {

    /**
     * Compares an advertiser with its Everflow counterpart and returns discrepancies
     * Compare advertiser with Everflow
     */
    async advertisersIdCompareWithEverflowGetRaw(requestParameters: AdvertisersIdCompareWithEverflowGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any | undefined; }>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling advertisersIdCompareWithEverflowGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/advertisers/{id}/compare-with-everflow`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Compares an advertiser with its Everflow counterpart and returns discrepancies
     * Compare advertiser with Everflow
     */
    async advertisersIdCompareWithEverflowGet(requestParameters: AdvertisersIdCompareWithEverflowGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any | undefined; }> {
        const response = await this.advertisersIdCompareWithEverflowGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an advertiser by its ID
     * Delete advertiser
     */
    async advertisersIdDeleteRaw(requestParameters: AdvertisersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling advertisersIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/advertisers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an advertiser by its ID
     * Delete advertiser
     */
    async advertisersIdDelete(requestParameters: AdvertisersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.advertisersIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves an advertiser by its ID
     * Get advertiser by ID
     */
    async advertisersIdGetRaw(requestParameters: AdvertisersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsAdvertiserResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling advertisersIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/advertisers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsAdvertiserResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves an advertiser by its ID
     * Get advertiser by ID
     */
    async advertisersIdGet(requestParameters: AdvertisersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsAdvertiserResponse> {
        const response = await this.advertisersIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves an advertiser provider mapping by advertiser ID and provider type
     * Get advertiser provider mapping
     */
    async advertisersIdProviderMappingsProviderTypeGetRaw(requestParameters: AdvertisersIdProviderMappingsProviderTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsGetAdvertiserProviderMappingResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling advertisersIdProviderMappingsProviderTypeGet().'
            );
        }

        if (requestParameters['providerType'] == null) {
            throw new runtime.RequiredError(
                'providerType',
                'Required parameter "providerType" was null or undefined when calling advertisersIdProviderMappingsProviderTypeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/advertisers/{id}/provider-mappings/{providerType}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"providerType"}}`, encodeURIComponent(String(requestParameters['providerType']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsGetAdvertiserProviderMappingResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves an advertiser provider mapping by advertiser ID and provider type
     * Get advertiser provider mapping
     */
    async advertisersIdProviderMappingsProviderTypeGet(requestParameters: AdvertisersIdProviderMappingsProviderTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsGetAdvertiserProviderMappingResponse> {
        const response = await this.advertisersIdProviderMappingsProviderTypeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an advertiser with the given details
     * Update advertiser
     */
    async advertisersIdPutRaw(requestParameters: AdvertisersIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsAdvertiserResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling advertisersIdPut().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling advertisersIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/advertisers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModelsUpdateAdvertiserRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsAdvertiserResponseFromJSON(jsonValue));
    }

    /**
     * Updates an advertiser with the given details
     * Update advertiser
     */
    async advertisersIdPut(requestParameters: AdvertisersIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsAdvertiserResponse> {
        const response = await this.advertisersIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Syncs an advertiser from the Everflow platform
     * Sync advertiser from Everflow
     */
    async advertisersIdSyncFromEverflowPostRaw(requestParameters: AdvertisersIdSyncFromEverflowPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string | undefined; }>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling advertisersIdSyncFromEverflowPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/advertisers/{id}/sync-from-everflow`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Syncs an advertiser from the Everflow platform
     * Sync advertiser from Everflow
     */
    async advertisersIdSyncFromEverflowPost(requestParameters: AdvertisersIdSyncFromEverflowPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string | undefined; }> {
        const response = await this.advertisersIdSyncFromEverflowPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Syncs an advertiser to the Everflow platform
     * Sync advertiser to Everflow
     */
    async advertisersIdSyncToEverflowPostRaw(requestParameters: AdvertisersIdSyncToEverflowPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string | undefined; }>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling advertisersIdSyncToEverflowPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/advertisers/{id}/sync-to-everflow`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Syncs an advertiser to the Everflow platform
     * Sync advertiser to Everflow
     */
    async advertisersIdSyncToEverflowPost(requestParameters: AdvertisersIdSyncToEverflowPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string | undefined; }> {
        const response = await this.advertisersIdSyncToEverflowPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new advertiser with the given details
     * Create a new advertiser
     */
    async advertisersPostRaw(requestParameters: AdvertisersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsAdvertiserResponse>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling advertisersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/advertisers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelsCreateAdvertiserRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsAdvertiserResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new advertiser with the given details
     * Create a new advertiser
     */
    async advertisersPost(requestParameters: AdvertisersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsAdvertiserResponse> {
        const response = await this.advertisersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates Everflow advertisers for all local advertisers that don\'t have provider mappings
     * Sync all advertisers to Everflow
     */
    async advertisersSyncAllToEverflowPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainBulkSyncResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/advertisers/sync-all-to-everflow`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainBulkSyncResultFromJSON(jsonValue));
    }

    /**
     * Creates Everflow advertisers for all local advertisers that don\'t have provider mappings
     * Sync all advertisers to Everflow
     */
    async advertisersSyncAllToEverflowPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainBulkSyncResult> {
        const response = await this.advertisersSyncAllToEverflowPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of advertisers for an organization with pagination
     * List advertisers by organization
     */
    async organizationsIdAdvertisersGetRaw(requestParameters: OrganizationsIdAdvertisersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DomainAdvertiser>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling organizationsIdAdvertisersGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/organizations/{id}/advertisers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DomainAdvertiserFromJSON));
    }

    /**
     * Retrieves a list of advertisers for an organization with pagination
     * List advertisers by organization
     */
    async organizationsIdAdvertisersGet(requestParameters: OrganizationsIdAdvertisersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DomainAdvertiser>> {
        const response = await this.organizationsIdAdvertisersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
