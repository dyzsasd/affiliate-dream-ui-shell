/* tslint:disable */
/* eslint-disable */
/**
 * Affiliate Backend API
 * API Server for Affiliate Backend Application
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DomainAdvertiser,
  DomainAdvertiserProviderMapping,
  HandlersCreateAdvertiserProviderMappingRequest,
  HandlersCreateAdvertiserRequest,
  HandlersUpdateAdvertiserProviderMappingRequest,
  HandlersUpdateAdvertiserRequest,
} from '../models/index';
import {
    DomainAdvertiserFromJSON,
    DomainAdvertiserToJSON,
    DomainAdvertiserProviderMappingFromJSON,
    DomainAdvertiserProviderMappingToJSON,
    HandlersCreateAdvertiserProviderMappingRequestFromJSON,
    HandlersCreateAdvertiserProviderMappingRequestToJSON,
    HandlersCreateAdvertiserRequestFromJSON,
    HandlersCreateAdvertiserRequestToJSON,
    HandlersUpdateAdvertiserProviderMappingRequestFromJSON,
    HandlersUpdateAdvertiserProviderMappingRequestToJSON,
    HandlersUpdateAdvertiserRequestFromJSON,
    HandlersUpdateAdvertiserRequestToJSON,
} from '../models/index';

export interface AdvertiserProviderMappingsMappingIdDeleteRequest {
    mappingId: number;
}

export interface AdvertiserProviderMappingsMappingIdPutRequest {
    mappingId: number;
    request: HandlersUpdateAdvertiserProviderMappingRequest;
}

export interface AdvertiserProviderMappingsPostRequest {
    request: HandlersCreateAdvertiserProviderMappingRequest;
}

export interface AdvertisersIdDeleteRequest {
    id: number;
}

export interface AdvertisersIdGetRequest {
    id: number;
}

export interface AdvertisersIdProviderMappingsProviderTypeGetRequest {
    id: number;
    providerType: string;
}

export interface AdvertisersIdPutRequest {
    id: number;
    request: HandlersUpdateAdvertiserRequest;
}

export interface AdvertisersPostRequest {
    request: HandlersCreateAdvertiserRequest;
}

export interface OrganizationsIdAdvertisersGetRequest {
    id: number;
    page?: number;
    pageSize?: number;
}

/**
 * 
 */
export class AdvertisersApi extends runtime.BaseAPI {

    /**
     * Deletes a mapping between an advertiser and a provider
     * Delete advertiser provider mapping
     */
    async advertiserProviderMappingsMappingIdDeleteRaw(requestParameters: AdvertiserProviderMappingsMappingIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mappingId'] == null) {
            throw new runtime.RequiredError(
                'mappingId',
                'Required parameter "mappingId" was null or undefined when calling advertiserProviderMappingsMappingIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/advertiser-provider-mappings/{mappingId}`.replace(`{${"mappingId"}}`, encodeURIComponent(String(requestParameters['mappingId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a mapping between an advertiser and a provider
     * Delete advertiser provider mapping
     */
    async advertiserProviderMappingsMappingIdDelete(requestParameters: AdvertiserProviderMappingsMappingIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.advertiserProviderMappingsMappingIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Updates a mapping between an advertiser and a provider
     * Update advertiser provider mapping
     */
    async advertiserProviderMappingsMappingIdPutRaw(requestParameters: AdvertiserProviderMappingsMappingIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainAdvertiserProviderMapping>> {
        if (requestParameters['mappingId'] == null) {
            throw new runtime.RequiredError(
                'mappingId',
                'Required parameter "mappingId" was null or undefined when calling advertiserProviderMappingsMappingIdPut().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling advertiserProviderMappingsMappingIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/advertiser-provider-mappings/{mappingId}`.replace(`{${"mappingId"}}`, encodeURIComponent(String(requestParameters['mappingId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HandlersUpdateAdvertiserProviderMappingRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainAdvertiserProviderMappingFromJSON(jsonValue));
    }

    /**
     * Updates a mapping between an advertiser and a provider
     * Update advertiser provider mapping
     */
    async advertiserProviderMappingsMappingIdPut(requestParameters: AdvertiserProviderMappingsMappingIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainAdvertiserProviderMapping> {
        const response = await this.advertiserProviderMappingsMappingIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new mapping between an advertiser and a provider
     * Create a new advertiser provider mapping
     */
    async advertiserProviderMappingsPostRaw(requestParameters: AdvertiserProviderMappingsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainAdvertiserProviderMapping>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling advertiserProviderMappingsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/advertiser-provider-mappings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HandlersCreateAdvertiserProviderMappingRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainAdvertiserProviderMappingFromJSON(jsonValue));
    }

    /**
     * Creates a new mapping between an advertiser and a provider
     * Create a new advertiser provider mapping
     */
    async advertiserProviderMappingsPost(requestParameters: AdvertiserProviderMappingsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainAdvertiserProviderMapping> {
        const response = await this.advertiserProviderMappingsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an advertiser by its ID
     * Delete advertiser
     */
    async advertisersIdDeleteRaw(requestParameters: AdvertisersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling advertisersIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/advertisers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an advertiser by its ID
     * Delete advertiser
     */
    async advertisersIdDelete(requestParameters: AdvertisersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.advertisersIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves an advertiser by its ID
     * Get advertiser by ID
     */
    async advertisersIdGetRaw(requestParameters: AdvertisersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainAdvertiser>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling advertisersIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/advertisers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainAdvertiserFromJSON(jsonValue));
    }

    /**
     * Retrieves an advertiser by its ID
     * Get advertiser by ID
     */
    async advertisersIdGet(requestParameters: AdvertisersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainAdvertiser> {
        const response = await this.advertisersIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a mapping between an advertiser and a provider
     * Get advertiser provider mapping
     */
    async advertisersIdProviderMappingsProviderTypeGetRaw(requestParameters: AdvertisersIdProviderMappingsProviderTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainAdvertiserProviderMapping>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling advertisersIdProviderMappingsProviderTypeGet().'
            );
        }

        if (requestParameters['providerType'] == null) {
            throw new runtime.RequiredError(
                'providerType',
                'Required parameter "providerType" was null or undefined when calling advertisersIdProviderMappingsProviderTypeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/advertisers/{id}/provider-mappings/{providerType}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"providerType"}}`, encodeURIComponent(String(requestParameters['providerType']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainAdvertiserProviderMappingFromJSON(jsonValue));
    }

    /**
     * Retrieves a mapping between an advertiser and a provider
     * Get advertiser provider mapping
     */
    async advertisersIdProviderMappingsProviderTypeGet(requestParameters: AdvertisersIdProviderMappingsProviderTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainAdvertiserProviderMapping> {
        const response = await this.advertisersIdProviderMappingsProviderTypeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an advertiser with the given details
     * Update advertiser
     */
    async advertisersIdPutRaw(requestParameters: AdvertisersIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainAdvertiser>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling advertisersIdPut().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling advertisersIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/advertisers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HandlersUpdateAdvertiserRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainAdvertiserFromJSON(jsonValue));
    }

    /**
     * Updates an advertiser with the given details
     * Update advertiser
     */
    async advertisersIdPut(requestParameters: AdvertisersIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainAdvertiser> {
        const response = await this.advertisersIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new advertiser with the given details
     * Create a new advertiser
     */
    async advertisersPostRaw(requestParameters: AdvertisersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainAdvertiser>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling advertisersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/advertisers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HandlersCreateAdvertiserRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainAdvertiserFromJSON(jsonValue));
    }

    /**
     * Creates a new advertiser with the given details
     * Create a new advertiser
     */
    async advertisersPost(requestParameters: AdvertisersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainAdvertiser> {
        const response = await this.advertisersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of advertisers for an organization with pagination
     * List advertisers by organization
     */
    async organizationsIdAdvertisersGetRaw(requestParameters: OrganizationsIdAdvertisersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DomainAdvertiser>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling organizationsIdAdvertisersGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/organizations/{id}/advertisers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DomainAdvertiserFromJSON));
    }

    /**
     * Retrieves a list of advertisers for an organization with pagination
     * List advertisers by organization
     */
    async organizationsIdAdvertisersGet(requestParameters: OrganizationsIdAdvertisersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DomainAdvertiser>> {
        const response = await this.organizationsIdAdvertisersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
